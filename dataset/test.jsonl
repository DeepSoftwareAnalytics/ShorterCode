{"instruction": "Write a function to add a dictionary to the tuple.", "output": "def add_dict_to_tuple(test_tup, test_dict):\n    test_tup = list(test_tup)\n    test_tup.append(test_dict)\n    test_tup = tuple(test_tup)\n    return test_tup\n"}
{"instruction": "Write a function to extract values between quotation marks of the given string by using regex.", "output": "import re\n\n\ndef extract_quotation(text1):\n    return re.findall('\"(.*?)\"', text1)\n"}
{"instruction": "Write a function to multiply the adjacent elements of the given tuple.", "output": "def multiply_elements(test_tup):\n    res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n    return res\n"}
{"instruction": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.", "output": "import re\n\n\ndef replace_specialchar(text):\n    return re.sub('[ ,.]', ':', text)\n"}
{"instruction": "Write a function to find the index of the first occurrence of a given number in a sorted array.", "output": "def find_first_occurrence(A, x):\n    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\n"}
{"instruction": "Write a python function to find sum of products of all possible subarrays.", "output": "def sum_Of_Subarray_Prod(arr, n):\n    ans = 0\n    res = 0\n    i = n - 1\n    while i >= 0:\n        incr = arr[i] * (1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return ans\n"}
{"instruction": "Write a python function to toggle bits of the number except the first and the last bit.", "output": "def set_middle_bits(n):\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n >> 1 ^ 1\n\n\ndef toggle_middle_bits(n):\n    if n == 1:\n        return 1\n    return n ^ set_middle_bits(n)\n"}
{"instruction": "Write a function to check whether the given string is starting with a vowel or not using regex.", "output": "import re\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\n\ndef check_str(string):\n    return 'Valid' if re.search(regex, string) else 'Invalid'\n"}
{"instruction": "Write a function to calculate the geometric sum of n-1.", "output": "def geometric_sum(n):\n    return 0 if n < 0 else 1 / pow(2, n) + geometric_sum(n - 1)\n"}
{"instruction": "Write a python function to find the index of smallest triangular number with n digits.", "output": "import math\n\n\ndef find_Index(n):\n    x = math.sqrt(2 * math.pow(10, n - 1))\n    return round(x)\n"}
{"instruction": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.", "output": "def tuple_to_dict(test_tup):\n    res = dict(test_tup[idx:idx + 2] for idx in range(0, len(test_tup), 2))\n    return res\n"}
{"instruction": "Write a function to rotate a given list by specified number of items to the right direction.", "output": "def rotate_right(list1, m, n):\n    result = list1[-m:] + list1[:-n]\n    return result\n"}
{"instruction": "Write a function to check if the given tuple has any none value or not.", "output": "def check_none(test_tup):\n    res = any(map(lambda ele: ele is None, test_tup))\n    return res\n"}
{"instruction": "Write a function to find area of a sector.", "output": "def sector_area(r, a):\n    pi = 22 / 7\n    if a >= 360:\n        return None\n    sectorarea = pi * r ** 2 * (a / 360)\n    return sectorarea\n"}
{"instruction": "Write a function to find the longest common subsequence for the given three string sequence.", "output": "def lcs_of_three(X, Y, Z, m, n, o):\n    L = [[[(0) for i in range(o + 1)] for j in range(n + 1)] for k in range\n        (m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                L[i][j][k] = 0 if i == 0 or j == 0 or k == 0 else L[i - 1][\n                    j - 1][k - 1] + 1 if X[i - 1] == Y[j - 1] and X[i - 1\n                    ] == Z[k - 1] else max(max(L[i - 1][j][k], L[i][j - 1][\n                    k]), L[i][j][k - 1])\n    return L[m][n][o]\n"}
{"instruction": "Write a function to add the given tuple to the given list.", "output": "def add_tuple(test_list, test_tup):\n    test_list += test_tup\n    return test_list\n"}
{"instruction": "Write a function to check if the given array represents min heap or not.", "output": "def check_min_heap(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = arr[i] <= arr[2 * i + 1] and check_min_heap(arr, 2 * i + 1)\n    right_child = 2 * i + 2 == len(arr) or arr[i] <= arr[2 * i + 2\n        ] and check_min_heap(arr, 2 * i + 2)\n    return left_child and right_child\n"}
{"instruction": "Write a function to find minimum k records from tuple list.", "output": "def min_k(test_list, K):\n    res = sorted(test_list, key=lambda x: x[1])[:K]\n    return res\n"}
{"instruction": "Write a function to find common index elements from three lists.", "output": "def extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if m == n == o:\n            result.append(m)\n    return result\n"}
{"instruction": "Write a function to find the second smallest number in a list.", "output": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return\n    if len(numbers) == 2 and numbers[0] == numbers[1]:\n        return\n    dup_items = set()\n    uniq_items = []\n    for x in numbers:\n        if x not in dup_items:\n            uniq_items.append(x)\n            dup_items.add(x)\n    uniq_items.sort()\n    return uniq_items[1]\n"}
{"instruction": "Write a function that matches a string that has an a followed by zero or one 'b'.", "output": "import re\n\n\ndef text_match_zero_one(text):\n    patterns = 'ab?'\n    return 'Found a match!' if re.search(patterns, text) else 'Not matched!'\n"}
{"instruction": "Write a python function to check whether an array contains only one distinct element or not.", "output": "def unique_Element(arr, n):\n    s = set(arr)\n    return 'YES' if len(s) == 1 else 'NO'\n"}
{"instruction": "Write a function to caluclate arc length of an angle.", "output": "def arc_length(d, a):\n    pi = 22 / 7\n    if a >= 360:\n        return None\n    arclength = pi * d * (a / 360)\n    return arclength\n"}
{"instruction": "Write a function to check whether the given month number contains 30 days or not.", "output": "def check_monthnumber_number(monthnum3):\n    return (True if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or \n        monthnum3 == 11 else False)\n"}
{"instruction": "Write a function to iterate over all pairs of consecutive items in a given list.", "output": "def pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = current_element, next_element\n        temp.append(x)\n    return temp\n"}
{"instruction": "Write a python function to check for odd parity of a given number.", "output": "def check_Odd_Parity(x):\n    parity = 0\n    while x != 0:\n        x = x & x - 1\n        parity += 1\n    return True if parity % 2 == 1 else False\n"}
{"instruction": "Write a python function to get the difference between two lists.", "output": "def Diff(li1, li2):\n    return list(list(set(li1) - set(li2)) + list(set(li2) - set(li1)))\n"}
{"instruction": "Write a python function to find the sum of fourth power of first n odd natural numbers.", "output": "def odd_Num_Sum(n):\n    j = 0\n    sm = 0\n    for i in range(1, n + 1):\n        j = 2 * i - 1\n        sm = sm + j * j * j * j\n    return sm\n"}
{"instruction": "Write a function to check if the given expression is balanced or not.", "output": "from collections import deque\n\n\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if top == '(' and ch != ')' or (top == '{' and ch != '}' or top ==\n                '[' and ch != ']'):\n                return False\n    return not stack\n"}
{"instruction": "Write a function to remove all the words with k length in the given string.", "output": "def remove_length(test_str, K):\n    temp = test_str.split()\n    res = [ele for ele in temp if len(ele) != K]\n    res = ' '.join(res)\n    return res\n"}
{"instruction": "Write a function to find the occurrence and position of the substrings within a string.", "output": "import re\n\n\ndef occurance_substring(text, pattern):\n    for match in re.finditer(pattern, text):\n        s = match.start()\n        e = match.end()\n        return text[s:e], s, e\n"}
{"instruction": "Write a function to check if the string is a valid email address or not using regex.", "output": "import re\nregex = '^[a-z0-9]+[\\\\._]?[a-z0-9]+[@]\\\\w+[.]\\\\w{2,3}$'\n\n\ndef check_email(email):\n    return 'Valid Email' if re.search(regex, email) else 'Invalid Email'\n"}
{"instruction": "Write a function to count those characters which have vowels as their neighbors in the given string.", "output": "def count_vowels(test_str):\n    res = 0\n    vow_list = ['a', 'e', 'i', 'o', 'u']\n    for idx in range(1, len(test_str) - 1):\n        if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or\n            test_str[idx + 1] in vow_list):\n            res += 1\n    if test_str[0] not in vow_list and test_str[1] in vow_list:\n        res += 1\n    if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n        res += 1\n    return res\n"}
{"instruction": "Write a function to find the combinations of sums with tuples in the given tuple list.", "output": "from itertools import combinations\n\n\ndef find_combinations(test_list):\n    res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(\n        test_list, 2)]\n    return res\n"}
{"instruction": "Write a python function to find the sum of all odd length subarrays.", "output": "def Odd_Length_Sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((i + 1) * (l - i) + 1) // 2 * arr[i]\n    return Sum\n"}
{"instruction": "Write a function to convert rgb color to hsv color.", "output": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r - g) / df) + 240) % 360\n    s = 0 if mx == 0 else df / mx * 100\n    v = mx * 100\n    return h, s, v\n"}
{"instruction": "Write a function to find the product of first even and odd number of a given list.", "output": "def mul_even_odd(list1):\n    first_even = next((el for el in list1 if el % 2 == 0), -1)\n    first_odd = next((el for el in list1 if el % 2 != 0), -1)\n    return first_even * first_odd\n"}
{"instruction": "Write a function to convert tuple string to integer tuple.", "output": "def tuple_str_int(test_str):\n    res = tuple(int(num) for num in test_str.replace('(', '').replace(')',\n        '').replace('...', '').split(', '))\n    return res\n"}
{"instruction": "Write a function that matches a string that has an a followed by three 'b'.", "output": "import re\n\n\ndef text_match_three(text):\n    patterns = 'ab{3}?'\n    return 'Found a match!' if re.search(patterns, text) else 'Not matched!'\n"}
{"instruction": "Write a function to create a new tuple from the given string and list.", "output": "def new_tuple(test_list, test_str):\n    res = tuple(test_list + [test_str])\n    return res\n"}
{"instruction": "Write a function to remove the nested record from the given tuple.", "output": "def remove_nested(test_tup):\n    res = tuple()\n    for count, ele in enumerate(test_tup):\n        if not isinstance(ele, tuple):\n            res = res + (ele,)\n    return res\n"}
{"instruction": "Write a python function to find the last position of an element in a sorted array.", "output": "def last(arr, x, n):\n    low = 0\n    high = n - 1\n    res = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res\n"}
{"instruction": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.", "output": "import re\n\n\ndef text_starta_endb(text):\n    patterns = 'a.*?b$'\n    return 'Found a match!' if re.search(patterns, text) else 'Not matched!'\n"}
{"instruction": "Write a python function to left rotate the bits of a given number.", "output": "INT_BITS = 32\n\n\ndef left_Rotate(n, d):\n    return n << d | n >> INT_BITS - d\n"}
{"instruction": "Write a function to remove all whitespaces from a string.", "output": "import re\n\n\ndef remove_all_spaces(text):\n    return re.sub('\\\\s+', '', text)\n"}
{"instruction": "Write a python function to count the number of equal numbers from three given integers.", "output": "def test_three_equal(x, y, z):\n    result = set([x, y, z])\n    return 0 if len(result) == 3 else 4 - len(result)\n"}
{"instruction": "Write a python function to count the number of rotations required to generate a sorted array.", "output": "def count_Rotation(arr, n):\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            return i\n    return 0\n"}
{"instruction": "Write a python function to check whether the product of numbers is even or not.", "output": "def is_Product_Even(arr, n):\n    for i in range(0, n):\n        if arr[i] & 1 == 0:\n            return True\n    return False\n"}
{"instruction": "Write a function to find maximum run of uppercase characters in the given string.", "output": "def max_run_uppercase(test_str):\n    cnt = 0\n    res = 0\n    for idx in range(0, len(test_str)):\n        if test_str[idx].isupper():\n            cnt += 1\n        else:\n            res = cnt\n            cnt = 0\n    if test_str[len(test_str) - 1].isupper():\n        res = cnt\n    return res\n"}
{"instruction": "Write a function to check if the given tuples contain the k or not.", "output": "def check_K(test_tup, K):\n    res = False\n    for ele in test_tup:\n        if ele == K:\n            res = True\n            break\n    return res\n"}
{"instruction": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.", "output": "def check_smaller(test_tup1, test_tup2):\n    res = all(x > y for x, y in zip(test_tup1, test_tup2))\n    return res\n"}
{"instruction": "Write a function to check if two lists of tuples are identical or not.", "output": "def check_identical(test_list1, test_list2):\n    res = test_list1 == test_list2\n    return res\n"}
{"instruction": "Write a function to abbreviate 'road' as 'rd.' in a given string.", "output": "import re\n\n\ndef road_rd(street):\n    return re.sub('Road$', 'Rd.', street)\n"}
{"instruction": "Write a function to find the area of a rombus.", "output": "def rombus_area(p, q):\n    area = p * q / 2\n    return area\n"}
{"instruction": "Write a function to clear the values of the given tuples.", "output": "def clear_tuple(test_tup):\n    temp = list(test_tup)\n    temp.clear()\n    test_tup = tuple(temp)\n    return test_tup\n"}
{"instruction": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.", "output": "def div_of_nums(nums, m, n):\n    result = list(filter(lambda x: x % m == 0 or x % n == 0, nums))\n    return result\n"}
{"instruction": "Write a function to check whether the given month number contains 28 days or not.", "output": "def check_monthnum_number(monthnum1):\n    return True if monthnum1 == 2 else False\n"}
{"instruction": "Write a function to return true if the password is valid.", "output": "import re\n\n\ndef pass_validity(p):\n    x = True\n    while x:\n        if len(p) < 6 or len(p) > 12:\n            break\n        elif not re.search('[a-z]', p):\n            break\n        elif not re.search('[0-9]', p):\n            break\n        elif not re.search('[A-Z]', p):\n            break\n        elif not re.search('[$#@]', p):\n            break\n        elif re.search('\\\\s', p):\n            break\n        else:\n            return True\n            x = False\n            break\n    if x:\n        return False\n"}
{"instruction": "Write a function to check if the given string starts with a substring using regex.", "output": "import re\n\n\ndef check_substring(string, sample):\n    if sample in string:\n        y = '\\\\A' + sample\n        x = re.search(y, string)\n        return ('string starts with the given substring' if x else\n            'string doesnt start with the given substring')\n    else:\n        return 'entered string isnt a substring'\n"}
{"instruction": "Write a python function to find the type of triangle from the given sides.", "output": "def check_Type_Of_Triangle(a, b, c):\n    sqa = pow(a, 2)\n    sqb = pow(b, 2)\n    sqc = pow(c, 2)\n    return ('Right-angled Triangle' if sqa == sqa + sqb or sqb == sqa + sqc or\n        sqc == sqa + sqb else 'Obtuse-angled Triangle' if sqa > sqc + sqb or\n        sqb > sqa + sqc or sqc > sqa + sqb else 'Acute-angled Triangle')\n"}
{"instruction": "Write a function to find out the second most repeated (or frequent) string in the given sequence.", "output": "from collections import Counter\n\n\ndef second_frequent(input):\n    dict = Counter(input)\n    value = sorted(dict.values(), reverse=True)\n    second_large = value[1]\n    for key, val in dict.items():\n        if val == second_large:\n            return key\n"}
{"instruction": "Write a python function to count equal element pairs from the given array.", "output": "def count_Pairs(arr, n):\n    cnt = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] == arr[j]:\n                cnt += 1\n    return cnt\n"}
{"instruction": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.", "output": "def generate_matrix(n):\n    if n <= 0:\n        return []\n    matrix = [row[:] for row in [[0] * n] * n]\n    row_st = 0\n    row_ed = n - 1\n    col_st = 0\n    col_ed = n - 1\n    current = 1\n    while True:\n        if current > n * n:\n            break\n        for c in range(col_st, col_ed + 1):\n            matrix[row_st][c] = current\n            current += 1\n        row_st += 1\n        for r in range(row_st, row_ed + 1):\n            matrix[r][col_ed] = current\n            current += 1\n        col_ed -= 1\n        for c in range(col_ed, col_st - 1, -1):\n            matrix[row_ed][c] = current\n            current += 1\n        row_ed -= 1\n        for r in range(row_ed, row_st - 1, -1):\n            matrix[r][col_st] = current\n            current += 1\n        col_st += 1\n    return matrix\n"}
{"instruction": "Write a python function to find the slope of a line.", "output": "def slope(x1, y1, x2, y2):\n    return float(y2 - y1) / (x2 - x1)\n"}
{"instruction": "Write a function to find length of the subarray having maximum sum.", "output": "from sys import maxsize\n\n\ndef max_sub_array_sum(a, size):\n    max_so_far = -maxsize - 1\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    for i in range(0, size):\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        if max_ending_here < 0:\n            max_ending_here = 0\n            s = i + 1\n    return end - start + 1\n"}
{"instruction": "Write a python function to find minimum number swaps required to make two binary strings equal.", "output": "def min_Swaps(s1, s2):\n    c0 = 0\n    c1 = 0\n    for i in range(len(s1)):\n        if s1[i] == '0' and s2[i] == '1':\n            c0 += 1\n        elif s1[i] == '1' and s2[i] == '0':\n            c1 += 1\n    result = c0 // 2 + c1 // 2\n    return result if c0 % 2 == 0 and c1 % 2 == 0 else result + 2 if (c0 + c1\n        ) % 2 == 0 else -1\n"}
{"instruction": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.", "output": "def Check_Solution(a, b, c):\n    return 'Yes' if b == 0 else 'No'\n"}
{"instruction": "Write a function to count the number of inversions in the given array.", "output": "def get_inv_count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n"}
{"instruction": "Write a function to find the number which occurs for odd number of times in the given array.", "output": "def get_odd_occurence(arr, arr_size):\n    for i in range(0, arr_size):\n        count = 0\n        for j in range(0, arr_size):\n            if arr[i] == arr[j]:\n                count += 1\n        if count % 2 != 0:\n            return arr[i]\n    return -1\n"}
{"instruction": "Write a python function to find the kth element in an array containing odd elements first and then even elements.", "output": "def get_Number(n, k):\n    arr = [0] * n\n    i = 0\n    odd = 1\n    while odd <= n:\n        arr[i] = odd\n        i += 1\n        odd += 2\n    even = 2\n    while even <= n:\n        arr[i] = even\n        i += 1\n        even += 2\n    return arr[k - 1]\n"}
{"instruction": "Write a python function to count the number of digits in factorial of a given number.", "output": "import math\n\n\ndef find_Digits(n):\n    if n < 0:\n        return 0\n    if n <= 1:\n        return 1\n    x = n * math.log10(n / math.e) + math.log10(2 * math.pi * n) / 2.0\n    return math.floor(x) + 1\n"}
{"instruction": "Write a function to find the minimum number of platforms required for a railway/bus station.", "output": "def find_platform(arr, dep, n):\n    arr.sort()\n    dep.sort()\n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while i < n and j < n:\n        if arr[i] <= dep[j]:\n            plat_needed += 1\n            i += 1\n        elif arr[i] > dep[j]:\n            plat_needed -= 1\n            j += 1\n        if plat_needed > result:\n            result = plat_needed\n    return result\n"}
{"instruction": "Write a python function to find sum of all prime divisors of a given number.", "output": "def Sum(N):\n    SumOfPrimeDivisors = [0] * (N + 1)\n    for i in range(2, N + 1):\n        if SumOfPrimeDivisors[i] == 0:\n            for j in range(i, N + 1, i):\n                SumOfPrimeDivisors[j] += i\n    return SumOfPrimeDivisors[N]\n"}
{"instruction": "Write a function to check if a triangle of positive area is possible with the given angles.", "output": "def is_triangleexists(a, b, c):\n    return (True if a + b >= c or b + c >= a or a + c >= b else False\n        ) if a != 0 and b != 0 and c != 0 and a + b + c == 180 else False\n"}
{"instruction": "Write a python function to find sum of inverse of divisors.", "output": "def Sum_of_Inverse_Divisors(N, Sum):\n    ans = float(Sum) * 1.0 / float(N)\n    return round(ans, 2)\n"}
{"instruction": "Write a python function to find sum of odd factors of a number.", "output": "import math\n\n\ndef sum_of_odd_Factors(n):\n    res = 1\n    while n % 2 == 0:\n        n = n // 2\n    for i in range(3, int(math.sqrt(n) + 1)):\n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while n % i == 0:\n            count += 1\n            n = n // i\n            curr_term *= i\n            curr_sum += curr_term\n        res *= curr_sum\n    if n >= 2:\n        res *= 1 + n\n    return res\n"}
{"instruction": "Write a python function to check for even parity of a given number.", "output": "def check_Even_Parity(x):\n    parity = 0\n    while x != 0:\n        x = x & x - 1\n        parity += 1\n    return True if parity % 2 == 0 else False\n"}
{"instruction": "Write a function to count number of lists in a given list of lists and square the count.", "output": "def count_list(input_list):\n    return len(input_list) ** 2\n"}
{"instruction": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.", "output": "import re\nregex = '[a-zA-z0-9]$'\n\n\ndef check_alphanumeric(string):\n    return 'Accept' if re.search(regex, string) else 'Discard'\n"}
{"instruction": "Write a function to find all anagrams of a string in a given list of strings using lambda function.", "output": "from collections import Counter\n\n\ndef anagram_lambda(texts, str):\n    result = list(filter(lambda x: Counter(str) == Counter(x), texts))\n    return result\n"}
{"instruction": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.", "output": "def find_longest_conseq_subseq(arr, n):\n    ans = 0\n    count = 0\n    arr.sort()\n    v = []\n    v.append(arr[0])\n    for i in range(1, n):\n        if arr[i] != arr[i - 1]:\n            v.append(arr[i])\n    for i in range(len(v)):\n        if i > 0 and v[i] == v[i - 1] + 1:\n            count += 1\n        else:\n            count = 1\n        ans = max(ans, count)\n    return ans\n"}
{"instruction": "Write a function to find palindromes in a given list of strings using lambda function.", "output": "def palindrome_lambda(texts):\n    result = list(filter(lambda x: x == ''.join(reversed(x)), texts))\n    return result\n"}
{"instruction": "Write a function to check whether the given month name contains 31 days or not.", "output": "def check_monthnumb(monthname2):\n    return (True if monthname2 == 'January' or monthname2 == 'March' or \n        monthname2 == 'May' or monthname2 == 'July' or monthname2 ==\n        'Augest' or monthname2 == 'October' or monthname2 == 'December' else\n        False)\n"}