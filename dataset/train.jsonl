{"instruction": "Create a description using title and price of the product and book.", "output": "def describe_product_book(title, price):\n    description = \"Product indicates {} and book indicates {}.\".format(title, price)\n    return description"}
{"instruction": "Create a description using id and quantity of the customer and teacher.", "output": "def describe_customer_teacher(id, quantity):\n    description = \"Customer was {} and teacher was {}.\".format(id, quantity)\n    return description"}
{"instruction": "Create a description using date and score of the user along with student.", "output": "def describe_user_student(date, score):\n    description = \"User displays {} along with student displays {}.\".format(date, score)\n    return description"}
{"instruction": "Create a description using name and email of the book as well as employee.", "output": "def describe_book_employee(name, email):\n    description = \"Book shows {} as well as employee shows {}.\".format(name, email)\n    return description"}
{"instruction": "Create a description using id and email of the teacher and student.", "output": "def describe_teacher_student(id, email):\n    description = \"Teacher is {} and student is {}.\".format(id, email)\n    return description"}
{"instruction": "Create a description using age and score of the customer plus teacher.", "output": "def describe_customer_teacher(age, score):\n    description = \"Customer includes {} plus teacher includes {}.\".format(age, score)\n    return description"}
{"instruction": "Create a description using email and id of the teacher as well as user.", "output": "def describe_teacher_user(email, id):\n    description = \"Teacher has {} as well as user has {}.\".format(email, id)\n    return description"}
{"instruction": "Create a description using date and status of the user and product.", "output": "def describe_user_product(date, status):\n    description = \"User includes {} and product includes {}.\".format(date, status)\n    return description"}
{"instruction": "Create a description using name and name of the teacher while file.", "output": "def describe_teacher_file(name, name):\n    description = \"Teacher shows {} while file shows {}.\".format(name, name)\n    return description"}
{"instruction": "Create a description using name and score of the employee along with person.", "output": "def describe_employee_person(name, score):\n    description = \"Employee is {} along with person is {}.\".format(name, score)\n    return description"}
{"instruction": "Create a description using name and age of the file and author.", "output": "def describe_file_author(name, age):\n    description = \"File displays {} and author displays {}.\".format(name, age)\n    return description"}
{"instruction": "Create a description using score and id of the file and product.", "output": "def describe_file_product(score, id):\n    description = \"File provides {} and product provides {}.\".format(score, id)\n    return description"}
{"instruction": "Create a description using name and age of the customer as well as customer.", "output": "def describe_customer_customer(name, age):\n    description = \"Customer returns {} as well as customer returns {}.\".format(name, age)\n    return description"}
{"instruction": "Create a description using status and price of the author whereas author.", "output": "def describe_author_author(status, price):\n    description = \"Author was {} whereas author was {}.\".format(status, price)\n    return description"}
{"instruction": "Create a description using date and title of the author along with author.", "output": "def describe_author_author(date, title):\n    description = \"Author contains {} along with author contains {}.\".format(date, title)\n    return description"}
{"instruction": "Create a description using age and name of the author plus person.", "output": "def describe_author_person(age, name):\n    description = \"Author provides {} plus person provides {}.\".format(age, name)\n    return description"}
{"instruction": "Create a description using id and name of the teacher but product.", "output": "def describe_teacher_product(id, name):\n    description = \"Teacher includes {} but product includes {}.\".format(id, name)\n    return description"}
{"instruction": "Create a description using status and status of the book along with person.", "output": "def describe_book_person(status, status):\n    description = \"Book includes {} along with person includes {}.\".format(status, status)\n    return description"}
{"instruction": "Create a description using age and id of the book but customer.", "output": "def describe_book_customer(age, id):\n    description = \"Book shows {} but customer shows {}.\".format(age, id)\n    return description"}
{"instruction": "Create a description using age and price of the file plus author.", "output": "def describe_file_author(age, price):\n    description = \"File was {} plus author was {}.\".format(age, price)\n    return description"}
{"instruction": "Create a description using date and quantity of the file while employee.", "output": "def describe_file_employee(date, quantity):\n    description = \"File shows {} while employee shows {}.\".format(date, quantity)\n    return description"}
{"instruction": "Create a description using date and name of the teacher and book.", "output": "def describe_teacher_book(date, name):\n    description = \"Teacher provides {} and book provides {}.\".format(date, name)\n    return description"}
{"instruction": "Create a description using score and age of the employee along with file.", "output": "def describe_employee_file(score, age):\n    description = \"Employee has {} along with file has {}.\".format(score, age)\n    return description"}
{"instruction": "Create a description using name and quantity of the customer plus student.", "output": "def describe_customer_student(name, quantity):\n    description = \"Customer indicates {} plus student indicates {}.\".format(name, quantity)\n    return description"}
{"instruction": "Create a description using score and email of the file and file.", "output": "def describe_file_file(score, email):\n    description = \"File was {} and file was {}.\".format(score, email)\n    return description"}
{"instruction": "Create a description using name and quantity of the product along with person.", "output": "def describe_product_person(name, quantity):\n    description = \"Product provides {} along with person provides {}.\".format(name, quantity)\n    return description"}
{"instruction": "Create a description using score and id of the teacher along with author.", "output": "def describe_teacher_author(score, id):\n    description = \"Teacher indicates {} along with author indicates {}.\".format(score, id)\n    return description"}
{"instruction": "Create a description using title and date of the person as well as user.", "output": "def describe_person_user(title, date):\n    description = \"Person was {} as well as user was {}.\".format(title, date)\n    return description"}
{"instruction": "Create a description using id and score of the employee whereas teacher.", "output": "def describe_employee_teacher(id, score):\n    description = \"Employee includes {} whereas teacher includes {}.\".format(id, score)\n    return description"}
{"instruction": "Create a description using price and id of the author whereas student.", "output": "def describe_author_student(price, id):\n    description = \"Author contains {} whereas student contains {}.\".format(price, id)\n    return description"}
{"instruction": "Create a description using title and price of the file whereas employee.", "output": "def describe_file_employee(title, price):\n    description = \"File is {} whereas employee is {}.\".format(title, price)\n    return description"}
{"instruction": "Create a description using email and quantity of the product but product.", "output": "def describe_product_product(email, quantity):\n    description = \"Product displays {} but product displays {}.\".format(email, quantity)\n    return description"}
{"instruction": "Create a description using quantity and age of the user but file.", "output": "def describe_user_file(quantity, age):\n    description = \"User returns {} but file returns {}.\".format(quantity, age)\n    return description"}
{"instruction": "Create a description using status and status of the employee plus file.", "output": "def describe_employee_file(status, status):\n    description = \"Employee is {} plus file is {}.\".format(status, status)\n    return description"}
{"instruction": "Create a description using name and name of the teacher plus teacher.", "output": "def describe_teacher_teacher(name, name):\n    description = \"Teacher has {} plus teacher has {}.\".format(name, name)\n    return description"}
{"instruction": "Create a description using score and age of the author but person.", "output": "def describe_author_person(score, age):\n    description = \"Author contains {} but person contains {}.\".format(score, age)\n    return description"}
{"instruction": "Create a description using date and email of the employee and author.", "output": "def describe_employee_author(date, email):\n    description = \"Employee indicates {} and author indicates {}.\".format(date, email)\n    return description"}
{"instruction": "Create a description using status and age of the customer while student.", "output": "def describe_customer_student(status, age):\n    description = \"Customer provides {} while student provides {}.\".format(status, age)\n    return description"}
{"instruction": "Create a description using age and quantity of the teacher while employee.", "output": "def describe_teacher_employee(age, quantity):\n    description = \"Teacher displays {} while employee displays {}.\".format(age, quantity)\n    return description"}
{"instruction": "Create a description using status and title of the person plus customer.", "output": "def describe_person_customer(status, title):\n    description = \"Person shows {} plus customer shows {}.\".format(status, title)\n    return description"}
{"instruction": "Create a description using name and title of the product but file.", "output": "def describe_product_file(name, title):\n    description = \"Product is {} but file is {}.\".format(name, title)\n    return description"}
{"instruction": "Create a description using price and score of the employee along with product.", "output": "def describe_employee_product(price, score):\n    description = \"Employee has {} along with product has {}.\".format(price, score)\n    return description"}
{"instruction": "Create a description using id and email of the file along with employee.", "output": "def describe_file_employee(id, email):\n    description = \"File is {} along with employee is {}.\".format(id, email)\n    return description"}
{"instruction": "Create a description using date and quantity of the student plus employee.", "output": "def describe_student_employee(date, quantity):\n    description = \"Student indicates {} plus employee indicates {}.\".format(date, quantity)\n    return description"}
{"instruction": "Create a description using quantity and id of the file along with employee.", "output": "def describe_file_employee(quantity, id):\n    description = \"File indicates {} along with employee indicates {}.\".format(quantity, id)\n    return description"}
{"instruction": "Create a description using title and price of the teacher as well as person.", "output": "def describe_teacher_person(title, price):\n    description = \"Teacher provides {} as well as person provides {}.\".format(title, price)\n    return description"}
{"instruction": "Create a description using date and email of the person plus student.", "output": "def describe_person_student(date, email):\n    description = \"Person provides {} plus student provides {}.\".format(date, email)\n    return description"}
{"instruction": "Create a description using email and date of the user plus file.", "output": "def describe_user_file(email, date):\n    description = \"User indicates {} plus file indicates {}.\".format(email, date)\n    return description"}
{"instruction": "Create a description using title and price of the customer but student.", "output": "def describe_customer_student(title, price):\n    description = \"Customer was {} but student was {}.\".format(title, price)\n    return description"}
{"instruction": "Create a description using email and status of the author while author.", "output": "def describe_author_author(email, status):\n    description = \"Author shows {} while author shows {}.\".format(email, status)\n    return description"}
{"instruction": "Create a description using date and title of the teacher and person.", "output": "def describe_teacher_person(date, title):\n    description = \"Teacher has {} and person has {}.\".format(date, title)\n    return description"}
{"instruction": "Create a description using score and price of the teacher along with employee.", "output": "def describe_teacher_employee(score, price):\n    description = \"Teacher displays {} along with employee displays {}.\".format(score, price)\n    return description"}
{"instruction": "Create a description using id and age of the user and employee.", "output": "def describe_user_employee(id, age):\n    description = \"User has {} and employee has {}.\".format(id, age)\n    return description"}
{"instruction": "Create a description using age and age of the student as well as author.", "output": "def describe_student_author(age, age):\n    description = \"Student has {} as well as author has {}.\".format(age, age)\n    return description"}
{"instruction": "Create a description using status and email of the teacher along with user.", "output": "def describe_teacher_user(status, email):\n    description = \"Teacher indicates {} along with user indicates {}.\".format(status, email)\n    return description"}
{"instruction": "Create a description using title and email of the employee as well as book.", "output": "def describe_employee_book(title, email):\n    description = \"Employee was {} as well as book was {}.\".format(title, email)\n    return description"}
{"instruction": "Create a description using name and date of the person while customer.", "output": "def describe_person_customer(name, date):\n    description = \"Person displays {} while customer displays {}.\".format(name, date)\n    return description"}
{"instruction": "Create a description using price and quantity of the customer along with customer.", "output": "def describe_customer_customer(price, quantity):\n    description = \"Customer was {} along with customer was {}.\".format(price, quantity)\n    return description"}
{"instruction": "Create a description using id and date of the file plus user.", "output": "def describe_file_user(id, date):\n    description = \"File contains {} plus user contains {}.\".format(id, date)\n    return description"}
{"instruction": "Create a description using quantity and status of the teacher as well as student.", "output": "def describe_teacher_student(quantity, status):\n    description = \"Teacher has {} as well as student has {}.\".format(quantity, status)\n    return description"}
{"instruction": "Create a description using date and id of the student as well as employee.", "output": "def describe_student_employee(date, id):\n    description = \"Student displays {} as well as employee displays {}.\".format(date, id)\n    return description"}
{"instruction": "Create a description using price and title of the person while person.", "output": "def describe_person_person(price, title):\n    description = \"Person is {} while person is {}.\".format(price, title)\n    return description"}
{"instruction": "Create a description using title and date of the customer plus employee.", "output": "def describe_customer_employee(title, date):\n    description = \"Customer is {} plus employee is {}.\".format(title, date)\n    return description"}
{"instruction": "Create a description using status and date of the customer whereas user.", "output": "def describe_customer_user(status, date):\n    description = \"Customer has {} whereas user has {}.\".format(status, date)\n    return description"}
{"instruction": "Create a description using email and age of the customer plus teacher.", "output": "def describe_customer_teacher(email, age):\n    description = \"Customer includes {} plus teacher includes {}.\".format(email, age)\n    return description"}
{"instruction": "Create a description using quantity and price of the person whereas author.", "output": "def describe_person_author(quantity, price):\n    description = \"Person has {} whereas author has {}.\".format(quantity, price)\n    return description"}
{"instruction": "Create a description using email and quantity of the user while book.", "output": "def describe_user_book(email, quantity):\n    description = \"User provides {} while book provides {}.\".format(email, quantity)\n    return description"}
{"instruction": "Create a description using title and email of the teacher and author.", "output": "def describe_teacher_author(title, email):\n    description = \"Teacher returns {} and author returns {}.\".format(title, email)\n    return description"}
{"instruction": "Create a description using price and score of the author while author.", "output": "def describe_author_author(price, score):\n    description = \"Author includes {} while author includes {}.\".format(price, score)\n    return description"}
{"instruction": "Create a description using age and name of the teacher along with author.", "output": "def describe_teacher_author(age, name):\n    description = \"Teacher was {} along with author was {}.\".format(age, name)\n    return description"}
{"instruction": "Create a description using quantity and name of the file plus author.", "output": "def describe_file_author(quantity, name):\n    description = \"File provides {} plus author provides {}.\".format(quantity, name)\n    return description"}
{"instruction": "Create a description using title and status of the person as well as file.", "output": "def describe_person_file(title, status):\n    description = \"Person indicates {} as well as file indicates {}.\".format(title, status)\n    return description"}
{"instruction": "Create a description using score and name of the teacher whereas teacher.", "output": "def describe_teacher_teacher(score, name):\n    description = \"Teacher returns {} whereas teacher returns {}.\".format(score, name)\n    return description"}
{"instruction": "Create a description using quantity and name of the employee and book.", "output": "def describe_employee_book(quantity, name):\n    description = \"Employee returns {} and book returns {}.\".format(quantity, name)\n    return description"}
{"instruction": "Create a description using id and name of the teacher but customer.", "output": "def describe_teacher_customer(id, name):\n    description = \"Teacher returns {} but customer returns {}.\".format(id, name)\n    return description"}
{"instruction": "Create a description using email and name of the employee but file.", "output": "def describe_employee_file(email, name):\n    description = \"Employee includes {} but file includes {}.\".format(email, name)\n    return description"}
{"instruction": "Create a description using status and score of the employee and file.", "output": "def describe_employee_file(status, score):\n    description = \"Employee returns {} and file returns {}.\".format(status, score)\n    return description"}
{"instruction": "Create a description using name and id of the file while book.", "output": "def describe_file_book(name, id):\n    description = \"File returns {} while book returns {}.\".format(name, id)\n    return description"}
{"instruction": "Create a description using status and price of the product while book.", "output": "def describe_product_book(status, price):\n    description = \"Product shows {} while book shows {}.\".format(status, price)\n    return description"}
{"instruction": "Create a description using status and name of the product but customer.", "output": "def describe_product_customer(status, name):\n    description = \"Product provides {} but customer provides {}.\".format(status, name)\n    return description"}
{"instruction": "Create a description using email and date of the employee and person.", "output": "def describe_employee_person(email, date):\n    description = \"Employee is {} and person is {}.\".format(email, date)\n    return description"}
{"instruction": "Create a description using status and status of the user plus user.", "output": "def describe_user_user(status, status):\n    description = \"User has {} plus user has {}.\".format(status, status)\n    return description"}
{"instruction": "Create a description using quantity and status of the teacher and student.", "output": "def describe_teacher_student(quantity, status):\n    description = \"Teacher was {} and student was {}.\".format(quantity, status)\n    return description"}
{"instruction": "Create a description using age and id of the user along with book.", "output": "def describe_user_book(age, id):\n    description = \"User includes {} along with book includes {}.\".format(age, id)\n    return description"}
{"instruction": "Create a description using status and title of the product while product.", "output": "def describe_product_product(status, title):\n    description = \"Product provides {} while product provides {}.\".format(status, title)\n    return description"}
{"instruction": "Create a description using date and status of the customer and book.", "output": "def describe_customer_book(date, status):\n    description = \"Customer shows {} and book shows {}.\".format(date, status)\n    return description"}
{"instruction": "Create a description using status and age of the teacher but employee.", "output": "def describe_teacher_employee(status, age):\n    description = \"Teacher returns {} but employee returns {}.\".format(status, age)\n    return description"}
{"instruction": "Create a description using score and price of the product as well as employee.", "output": "def describe_product_employee(score, price):\n    description = \"Product provides {} as well as employee provides {}.\".format(score, price)\n    return description"}
{"instruction": "Create a description using email and date of the employee along with student.", "output": "def describe_employee_student(email, date):\n    description = \"Employee includes {} along with student includes {}.\".format(email, date)\n    return description"}
{"instruction": "Create a description using id and quantity of the customer and author.", "output": "def describe_customer_author(id, quantity):\n    description = \"Customer was {} and author was {}.\".format(id, quantity)\n    return description"}
{"instruction": "Create a description using title and status of the customer plus user.", "output": "def describe_customer_user(title, status):\n    description = \"Customer indicates {} plus user indicates {}.\".format(title, status)\n    return description"}
{"instruction": "Create a description using status and date of the customer as well as person.", "output": "def describe_customer_person(status, date):\n    description = \"Customer has {} as well as person has {}.\".format(status, date)\n    return description"}
{"instruction": "Create a description using title and id of the author while student.", "output": "def describe_author_student(title, id):\n    description = \"Author is {} while student is {}.\".format(title, id)\n    return description"}
{"instruction": "Create a description using price and title of the customer whereas student.", "output": "def describe_customer_student(price, title):\n    description = \"Customer provides {} whereas student provides {}.\".format(price, title)\n    return description"}
{"instruction": "Create a description using quantity and title of the person along with book.", "output": "def describe_person_book(quantity, title):\n    description = \"Person was {} along with book was {}.\".format(quantity, title)\n    return description"}
{"instruction": "Create a description using id and date of the user as well as customer.", "output": "def describe_user_customer(id, date):\n    description = \"User includes {} as well as customer includes {}.\".format(id, date)\n    return description"}
{"instruction": "Create a description using price and quantity of the book but file.", "output": "def describe_book_file(price, quantity):\n    description = \"Book is {} but file is {}.\".format(price, quantity)\n    return description"}
{"instruction": "Create a description using status and age of the customer as well as student.", "output": "def describe_customer_student(status, age):\n    description = \"Customer indicates {} as well as student indicates {}.\".format(status, age)\n    return description"}
{"instruction": "Create a description using title and name of the customer while employee.", "output": "def describe_customer_employee(title, name):\n    description = \"Customer returns {} while employee returns {}.\".format(title, name)\n    return description"}
{"instruction": "Create a description using date and name of the employee plus person.", "output": "def describe_employee_person(date, name):\n    description = \"Employee includes {} plus person includes {}.\".format(date, name)\n    return description"}
{"instruction": "Create a class FileManager that manages multiple resources and deletes them when done.", "output": "class FileManager:\n    def __init__(self):\n        self.file1 = None\n        self.file2 = None\n        self.file3 = None\n\n    def open_resources(self):\n        self.file1 = open('file1.txt', 'r')\n        self.file2 = open('file2.txt', 'r')\n        self.file3 = open('file3.txt', 'r')\n\n    def close_resources(self):\n        del self.file1, self.file2, self.file3"}
{"instruction": "Create a class ResourceHandler that manages multiple resources and deletes them when done.", "output": "class ResourceHandler:\n    def __init__(self):\n        self.conn1 = None\n        self.conn2 = None\n        self.conn3 = None\n\n    def open_resources(self):\n        self.conn1 = open('conn1.txt', 'r')\n        self.conn2 = open('conn2.txt', 'r')\n        self.conn3 = open('conn3.txt', 'r')\n\n    def close_resources(self):\n        del self.conn1, self.conn2, self.conn3"}
{"instruction": "Create a class ConnectionPool that manages multiple resources and deletes them when done.", "output": "class ConnectionPool:\n    def __init__(self):\n        self.img1 = None\n        self.img2 = None\n        self.img3 = None\n\n    def open_resources(self):\n        self.img1 = open('img1.txt', 'r')\n        self.img2 = open('img2.txt', 'r')\n        self.img3 = open('img3.txt', 'r')\n\n    def close_resources(self):\n        del self.img1, self.img2, self.img3"}
{"instruction": "Create a class ImageLoader that manages multiple resources and deletes them when done.", "output": "class ImageLoader:\n    def __init__(self):\n        self.stream1 = None\n        self.stream2 = None\n        self.stream3 = None\n\n    def open_resources(self):\n        self.stream1 = open('stream1.txt', 'r')\n        self.stream2 = open('stream2.txt', 'r')\n        self.stream3 = open('stream3.txt', 'r')\n\n    def close_resources(self):\n        del self.stream1, self.stream2, self.stream3"}
{"instruction": "Create a class StreamController that manages multiple resources and deletes them when done.", "output": "class StreamController:\n    def __init__(self):\n        self.res1 = None\n        self.res2 = None\n        self.res3 = None\n\n    def open_resources(self):\n        self.res1 = open('res1.txt', 'r')\n        self.res2 = open('res2.txt', 'r')\n        self.res3 = open('res3.txt', 'r')\n\n    def close_resources(self):\n        del self.res1, self.res2, self.res3"}
{"instruction": "Create a class DataAggregator that manages multiple resources and deletes them when done.", "output": "class DataAggregator:\n    def __init__(self):\n        self.buffer1 = None\n        self.buffer2 = None\n        self.buffer3 = None\n\n    def open_resources(self):\n        self.buffer1 = open('buffer1.txt', 'r')\n        self.buffer2 = open('buffer2.txt', 'r')\n        self.buffer3 = open('buffer3.txt', 'r')\n\n    def close_resources(self):\n        del self.buffer1, self.buffer2, self.buffer3"}
{"instruction": "Create a class DeviceManager that manages multiple resources and deletes them when done.", "output": "class DeviceManager:\n    def __init__(self):\n        self.audio1 = None\n        self.audio2 = None\n        self.audio3 = None\n\n    def open_resources(self):\n        self.audio1 = open('audio1.txt', 'r')\n        self.audio2 = open('audio2.txt', 'r')\n        self.audio3 = open('audio3.txt', 'r')\n\n    def close_resources(self):\n        del self.audio1, self.audio2, self.audio3"}
{"instruction": "Create a class BufferSystem that manages multiple resources and deletes them when done.", "output": "class BufferSystem:\n    def __init__(self):\n        self.device1 = None\n        self.device2 = None\n        self.device3 = None\n\n    def open_resources(self):\n        self.device1 = open('device1.txt', 'r')\n        self.device2 = open('device2.txt', 'r')\n        self.device3 = open('device3.txt', 'r')\n\n    def close_resources(self):\n        del self.device1, self.device2, self.device3"}
{"instruction": "Create a class AudioMixer that manages multiple resources and deletes them when done.", "output": "class AudioMixer:\n    def __init__(self):\n        self.data1 = None\n        self.data2 = None\n        self.data3 = None\n\n    def open_resources(self):\n        self.data1 = open('data1.txt', 'r')\n        self.data2 = open('data2.txt', 'r')\n        self.data3 = open('data3.txt', 'r')\n\n    def close_resources(self):\n        del self.data1, self.data2, self.data3"}
{"instruction": "Create a class ServiceMonitor that manages multiple resources and deletes them when done.", "output": "class ServiceMonitor:\n    def __init__(self):\n        self.svc1 = None\n        self.svc2 = None\n        self.svc3 = None\n\n    def open_resources(self):\n        self.svc1 = open('svc1.txt', 'r')\n        self.svc2 = open('svc2.txt', 'r')\n        self.svc3 = open('svc3.txt', 'r')\n\n    def close_resources(self):\n        del self.svc1, self.svc2, self.svc3"}
{"instruction": "Create a class FileManager that manages multiple resources and deletes them when done.", "output": "class FileManager:\n    def __init__(self):\n        self.file1 = None\n        self.file2 = None\n        self.file3 = None\n\n    def open_resources(self):\n        self.file1 = open('file1.txt', 'r')\n        self.file2 = open('file2.txt', 'r')\n        self.file3 = open('file3.txt', 'r')\n\n    def close_resources(self):\n        del self.file1, self.file2, self.file3"}
{"instruction": "Create a class ResourceHandler that manages multiple resources and deletes them when done.", "output": "class ResourceHandler:\n    def __init__(self):\n        self.conn1 = None\n        self.conn2 = None\n        self.conn3 = None\n\n    def open_resources(self):\n        self.conn1 = open('conn1.txt', 'r')\n        self.conn2 = open('conn2.txt', 'r')\n        self.conn3 = open('conn3.txt', 'r')\n\n    def close_resources(self):\n        del self.conn1, self.conn2, self.conn3"}
{"instruction": "Create a class ConnectionPool that manages multiple resources and deletes them when done.", "output": "class ConnectionPool:\n    def __init__(self):\n        self.img1 = None\n        self.img2 = None\n        self.img3 = None\n\n    def open_resources(self):\n        self.img1 = open('img1.txt', 'r')\n        self.img2 = open('img2.txt', 'r')\n        self.img3 = open('img3.txt', 'r')\n\n    def close_resources(self):\n        del self.img1, self.img2, self.img3"}
{"instruction": "Create a class ImageLoader that manages multiple resources and deletes them when done.", "output": "class ImageLoader:\n    def __init__(self):\n        self.stream1 = None\n        self.stream2 = None\n        self.stream3 = None\n\n    def open_resources(self):\n        self.stream1 = open('stream1.txt', 'r')\n        self.stream2 = open('stream2.txt', 'r')\n        self.stream3 = open('stream3.txt', 'r')\n\n    def close_resources(self):\n        del self.stream1, self.stream2, self.stream3"}
{"instruction": "Create a class StreamController that manages multiple resources and deletes them when done.", "output": "class StreamController:\n    def __init__(self):\n        self.res1 = None\n        self.res2 = None\n        self.res3 = None\n\n    def open_resources(self):\n        self.res1 = open('res1.txt', 'r')\n        self.res2 = open('res2.txt', 'r')\n        self.res3 = open('res3.txt', 'r')\n\n    def close_resources(self):\n        del self.res1, self.res2, self.res3"}
{"instruction": "Create a class DataAggregator that manages multiple resources and deletes them when done.", "output": "class DataAggregator:\n    def __init__(self):\n        self.buffer1 = None\n        self.buffer2 = None\n        self.buffer3 = None\n\n    def open_resources(self):\n        self.buffer1 = open('buffer1.txt', 'r')\n        self.buffer2 = open('buffer2.txt', 'r')\n        self.buffer3 = open('buffer3.txt', 'r')\n\n    def close_resources(self):\n        del self.buffer1, self.buffer2, self.buffer3"}
{"instruction": "Create a class DeviceManager that manages multiple resources and deletes them when done.", "output": "class DeviceManager:\n    def __init__(self):\n        self.audio1 = None\n        self.audio2 = None\n        self.audio3 = None\n\n    def open_resources(self):\n        self.audio1 = open('audio1.txt', 'r')\n        self.audio2 = open('audio2.txt', 'r')\n        self.audio3 = open('audio3.txt', 'r')\n\n    def close_resources(self):\n        del self.audio1, self.audio2, self.audio3"}
{"instruction": "Create a class BufferSystem that manages multiple resources and deletes them when done.", "output": "class BufferSystem:\n    def __init__(self):\n        self.device1 = None\n        self.device2 = None\n        self.device3 = None\n\n    def open_resources(self):\n        self.device1 = open('device1.txt', 'r')\n        self.device2 = open('device2.txt', 'r')\n        self.device3 = open('device3.txt', 'r')\n\n    def close_resources(self):\n        del self.device1, self.device2, self.device3"}
{"instruction": "Create a class AudioMixer that manages multiple resources and deletes them when done.", "output": "class AudioMixer:\n    def __init__(self):\n        self.data1 = None\n        self.data2 = None\n        self.data3 = None\n\n    def open_resources(self):\n        self.data1 = open('data1.txt', 'r')\n        self.data2 = open('data2.txt', 'r')\n        self.data3 = open('data3.txt', 'r')\n\n    def close_resources(self):\n        del self.data1, self.data2, self.data3"}
{"instruction": "Create a class ServiceMonitor that manages multiple resources and deletes them when done.", "output": "class ServiceMonitor:\n    def __init__(self):\n        self.svc1 = None\n        self.svc2 = None\n        self.svc3 = None\n\n    def open_resources(self):\n        self.svc1 = open('svc1.txt', 'r')\n        self.svc2 = open('svc2.txt', 'r')\n        self.svc3 = open('svc3.txt', 'r')\n\n    def close_resources(self):\n        del self.svc1, self.svc2, self.svc3"}
{"instruction": "Create a class FileManager that manages multiple resources and deletes them when done.", "output": "class FileManager:\n    def __init__(self):\n        self.file1 = None\n        self.file2 = None\n        self.file3 = None\n\n    def open_resources(self):\n        self.file1 = open('file1.txt', 'r')\n        self.file2 = open('file2.txt', 'r')\n        self.file3 = open('file3.txt', 'r')\n\n    def close_resources(self):\n        del self.file1, self.file2, self.file3"}
{"instruction": "Create a class ResourceHandler that manages multiple resources and deletes them when done.", "output": "class ResourceHandler:\n    def __init__(self):\n        self.conn1 = None\n        self.conn2 = None\n        self.conn3 = None\n\n    def open_resources(self):\n        self.conn1 = open('conn1.txt', 'r')\n        self.conn2 = open('conn2.txt', 'r')\n        self.conn3 = open('conn3.txt', 'r')\n\n    def close_resources(self):\n        del self.conn1, self.conn2, self.conn3"}
{"instruction": "Create a class ConnectionPool that manages multiple resources and deletes them when done.", "output": "class ConnectionPool:\n    def __init__(self):\n        self.img1 = None\n        self.img2 = None\n        self.img3 = None\n\n    def open_resources(self):\n        self.img1 = open('img1.txt', 'r')\n        self.img2 = open('img2.txt', 'r')\n        self.img3 = open('img3.txt', 'r')\n\n    def close_resources(self):\n        del self.img1, self.img2, self.img3"}
{"instruction": "Create a class ImageLoader that manages multiple resources and deletes them when done.", "output": "class ImageLoader:\n    def __init__(self):\n        self.stream1 = None\n        self.stream2 = None\n        self.stream3 = None\n\n    def open_resources(self):\n        self.stream1 = open('stream1.txt', 'r')\n        self.stream2 = open('stream2.txt', 'r')\n        self.stream3 = open('stream3.txt', 'r')\n\n    def close_resources(self):\n        del self.stream1, self.stream2, self.stream3"}
{"instruction": "Create a class StreamController that manages multiple resources and deletes them when done.", "output": "class StreamController:\n    def __init__(self):\n        self.res1 = None\n        self.res2 = None\n        self.res3 = None\n\n    def open_resources(self):\n        self.res1 = open('res1.txt', 'r')\n        self.res2 = open('res2.txt', 'r')\n        self.res3 = open('res3.txt', 'r')\n\n    def close_resources(self):\n        del self.res1, self.res2, self.res3"}
{"instruction": "Create a class DataAggregator that manages multiple resources and deletes them when done.", "output": "class DataAggregator:\n    def __init__(self):\n        self.buffer1 = None\n        self.buffer2 = None\n        self.buffer3 = None\n\n    def open_resources(self):\n        self.buffer1 = open('buffer1.txt', 'r')\n        self.buffer2 = open('buffer2.txt', 'r')\n        self.buffer3 = open('buffer3.txt', 'r')\n\n    def close_resources(self):\n        del self.buffer1, self.buffer2, self.buffer3"}
{"instruction": "Create a class DeviceManager that manages multiple resources and deletes them when done.", "output": "class DeviceManager:\n    def __init__(self):\n        self.audio1 = None\n        self.audio2 = None\n        self.audio3 = None\n\n    def open_resources(self):\n        self.audio1 = open('audio1.txt', 'r')\n        self.audio2 = open('audio2.txt', 'r')\n        self.audio3 = open('audio3.txt', 'r')\n\n    def close_resources(self):\n        del self.audio1, self.audio2, self.audio3"}
{"instruction": "Create a class BufferSystem that manages multiple resources and deletes them when done.", "output": "class BufferSystem:\n    def __init__(self):\n        self.device1 = None\n        self.device2 = None\n        self.device3 = None\n\n    def open_resources(self):\n        self.device1 = open('device1.txt', 'r')\n        self.device2 = open('device2.txt', 'r')\n        self.device3 = open('device3.txt', 'r')\n\n    def close_resources(self):\n        del self.device1, self.device2, self.device3"}
{"instruction": "Create a class AudioMixer that manages multiple resources and deletes them when done.", "output": "class AudioMixer:\n    def __init__(self):\n        self.data1 = None\n        self.data2 = None\n        self.data3 = None\n\n    def open_resources(self):\n        self.data1 = open('data1.txt', 'r')\n        self.data2 = open('data2.txt', 'r')\n        self.data3 = open('data3.txt', 'r')\n\n    def close_resources(self):\n        del self.data1, self.data2, self.data3"}
{"instruction": "Create a class ServiceMonitor that manages multiple resources and deletes them when done.", "output": "class ServiceMonitor:\n    def __init__(self):\n        self.svc1 = None\n        self.svc2 = None\n        self.svc3 = None\n\n    def open_resources(self):\n        self.svc1 = open('svc1.txt', 'r')\n        self.svc2 = open('svc2.txt', 'r')\n        self.svc3 = open('svc3.txt', 'r')\n\n    def close_resources(self):\n        del self.svc1, self.svc2, self.svc3"}
{"instruction": "Create a class FileManager that manages multiple resources and deletes them when done.", "output": "class FileManager:\n    def __init__(self):\n        self.file1 = None\n        self.file2 = None\n        self.file3 = None\n\n    def open_resources(self):\n        self.file1 = open('file1.txt', 'r')\n        self.file2 = open('file2.txt', 'r')\n        self.file3 = open('file3.txt', 'r')\n\n    def close_resources(self):\n        del self.file1, self.file2, self.file3"}
{"instruction": "Create a class ResourceHandler that manages multiple resources and deletes them when done.", "output": "class ResourceHandler:\n    def __init__(self):\n        self.conn1 = None\n        self.conn2 = None\n        self.conn3 = None\n\n    def open_resources(self):\n        self.conn1 = open('conn1.txt', 'r')\n        self.conn2 = open('conn2.txt', 'r')\n        self.conn3 = open('conn3.txt', 'r')\n\n    def close_resources(self):\n        del self.conn1, self.conn2, self.conn3"}
{"instruction": "Create a class ConnectionPool that manages multiple resources and deletes them when done.", "output": "class ConnectionPool:\n    def __init__(self):\n        self.img1 = None\n        self.img2 = None\n        self.img3 = None\n\n    def open_resources(self):\n        self.img1 = open('img1.txt', 'r')\n        self.img2 = open('img2.txt', 'r')\n        self.img3 = open('img3.txt', 'r')\n\n    def close_resources(self):\n        del self.img1, self.img2, self.img3"}
{"instruction": "Create a class ImageLoader that manages multiple resources and deletes them when done.", "output": "class ImageLoader:\n    def __init__(self):\n        self.stream1 = None\n        self.stream2 = None\n        self.stream3 = None\n\n    def open_resources(self):\n        self.stream1 = open('stream1.txt', 'r')\n        self.stream2 = open('stream2.txt', 'r')\n        self.stream3 = open('stream3.txt', 'r')\n\n    def close_resources(self):\n        del self.stream1, self.stream2, self.stream3"}
{"instruction": "Create a class StreamController that manages multiple resources and deletes them when done.", "output": "class StreamController:\n    def __init__(self):\n        self.res1 = None\n        self.res2 = None\n        self.res3 = None\n\n    def open_resources(self):\n        self.res1 = open('res1.txt', 'r')\n        self.res2 = open('res2.txt', 'r')\n        self.res3 = open('res3.txt', 'r')\n\n    def close_resources(self):\n        del self.res1, self.res2, self.res3"}
{"instruction": "Create a class DataAggregator that manages multiple resources and deletes them when done.", "output": "class DataAggregator:\n    def __init__(self):\n        self.buffer1 = None\n        self.buffer2 = None\n        self.buffer3 = None\n\n    def open_resources(self):\n        self.buffer1 = open('buffer1.txt', 'r')\n        self.buffer2 = open('buffer2.txt', 'r')\n        self.buffer3 = open('buffer3.txt', 'r')\n\n    def close_resources(self):\n        del self.buffer1, self.buffer2, self.buffer3"}
{"instruction": "Create a class DeviceManager that manages multiple resources and deletes them when done.", "output": "class DeviceManager:\n    def __init__(self):\n        self.audio1 = None\n        self.audio2 = None\n        self.audio3 = None\n\n    def open_resources(self):\n        self.audio1 = open('audio1.txt', 'r')\n        self.audio2 = open('audio2.txt', 'r')\n        self.audio3 = open('audio3.txt', 'r')\n\n    def close_resources(self):\n        del self.audio1, self.audio2, self.audio3"}
{"instruction": "Create a class BufferSystem that manages multiple resources and deletes them when done.", "output": "class BufferSystem:\n    def __init__(self):\n        self.device1 = None\n        self.device2 = None\n        self.device3 = None\n\n    def open_resources(self):\n        self.device1 = open('device1.txt', 'r')\n        self.device2 = open('device2.txt', 'r')\n        self.device3 = open('device3.txt', 'r')\n\n    def close_resources(self):\n        del self.device1, self.device2, self.device3"}
{"instruction": "Create a class AudioMixer that manages multiple resources and deletes them when done.", "output": "class AudioMixer:\n    def __init__(self):\n        self.data1 = None\n        self.data2 = None\n        self.data3 = None\n\n    def open_resources(self):\n        self.data1 = open('data1.txt', 'r')\n        self.data2 = open('data2.txt', 'r')\n        self.data3 = open('data3.txt', 'r')\n\n    def close_resources(self):\n        del self.data1, self.data2, self.data3"}
{"instruction": "Create a class ServiceMonitor that manages multiple resources and deletes them when done.", "output": "class ServiceMonitor:\n    def __init__(self):\n        self.svc1 = None\n        self.svc2 = None\n        self.svc3 = None\n\n    def open_resources(self):\n        self.svc1 = open('svc1.txt', 'r')\n        self.svc2 = open('svc2.txt', 'r')\n        self.svc3 = open('svc3.txt', 'r')\n\n    def close_resources(self):\n        del self.svc1, self.svc2, self.svc3"}
{"instruction": "Create a class FileManager that manages multiple resources and deletes them when done.", "output": "class FileManager:\n    def __init__(self):\n        self.file1 = None\n        self.file2 = None\n        self.file3 = None\n\n    def open_resources(self):\n        self.file1 = open('file1.txt', 'r')\n        self.file2 = open('file2.txt', 'r')\n        self.file3 = open('file3.txt', 'r')\n\n    def close_resources(self):\n        del self.file1, self.file2, self.file3"}
{"instruction": "Create a class ResourceHandler that manages multiple resources and deletes them when done.", "output": "class ResourceHandler:\n    def __init__(self):\n        self.conn1 = None\n        self.conn2 = None\n        self.conn3 = None\n\n    def open_resources(self):\n        self.conn1 = open('conn1.txt', 'r')\n        self.conn2 = open('conn2.txt', 'r')\n        self.conn3 = open('conn3.txt', 'r')\n\n    def close_resources(self):\n        del self.conn1, self.conn2, self.conn3"}
{"instruction": "Create a class ConnectionPool that manages multiple resources and deletes them when done.", "output": "class ConnectionPool:\n    def __init__(self):\n        self.img1 = None\n        self.img2 = None\n        self.img3 = None\n\n    def open_resources(self):\n        self.img1 = open('img1.txt', 'r')\n        self.img2 = open('img2.txt', 'r')\n        self.img3 = open('img3.txt', 'r')\n\n    def close_resources(self):\n        del self.img1, self.img2, self.img3"}
{"instruction": "Create a class ImageLoader that manages multiple resources and deletes them when done.", "output": "class ImageLoader:\n    def __init__(self):\n        self.stream1 = None\n        self.stream2 = None\n        self.stream3 = None\n\n    def open_resources(self):\n        self.stream1 = open('stream1.txt', 'r')\n        self.stream2 = open('stream2.txt', 'r')\n        self.stream3 = open('stream3.txt', 'r')\n\n    def close_resources(self):\n        del self.stream1, self.stream2, self.stream3"}
{"instruction": "Create a class StreamController that manages multiple resources and deletes them when done.", "output": "class StreamController:\n    def __init__(self):\n        self.res1 = None\n        self.res2 = None\n        self.res3 = None\n\n    def open_resources(self):\n        self.res1 = open('res1.txt', 'r')\n        self.res2 = open('res2.txt', 'r')\n        self.res3 = open('res3.txt', 'r')\n\n    def close_resources(self):\n        del self.res1, self.res2, self.res3"}
{"instruction": "Create a class DataAggregator that manages multiple resources and deletes them when done.", "output": "class DataAggregator:\n    def __init__(self):\n        self.buffer1 = None\n        self.buffer2 = None\n        self.buffer3 = None\n\n    def open_resources(self):\n        self.buffer1 = open('buffer1.txt', 'r')\n        self.buffer2 = open('buffer2.txt', 'r')\n        self.buffer3 = open('buffer3.txt', 'r')\n\n    def close_resources(self):\n        del self.buffer1, self.buffer2, self.buffer3"}
{"instruction": "Create a class DeviceManager that manages multiple resources and deletes them when done.", "output": "class DeviceManager:\n    def __init__(self):\n        self.audio1 = None\n        self.audio2 = None\n        self.audio3 = None\n\n    def open_resources(self):\n        self.audio1 = open('audio1.txt', 'r')\n        self.audio2 = open('audio2.txt', 'r')\n        self.audio3 = open('audio3.txt', 'r')\n\n    def close_resources(self):\n        del self.audio1, self.audio2, self.audio3"}
{"instruction": "Create a class BufferSystem that manages multiple resources and deletes them when done.", "output": "class BufferSystem:\n    def __init__(self):\n        self.device1 = None\n        self.device2 = None\n        self.device3 = None\n\n    def open_resources(self):\n        self.device1 = open('device1.txt', 'r')\n        self.device2 = open('device2.txt', 'r')\n        self.device3 = open('device3.txt', 'r')\n\n    def close_resources(self):\n        del self.device1, self.device2, self.device3"}
{"instruction": "Create a class AudioMixer that manages multiple resources and deletes them when done.", "output": "class AudioMixer:\n    def __init__(self):\n        self.data1 = None\n        self.data2 = None\n        self.data3 = None\n\n    def open_resources(self):\n        self.data1 = open('data1.txt', 'r')\n        self.data2 = open('data2.txt', 'r')\n        self.data3 = open('data3.txt', 'r')\n\n    def close_resources(self):\n        del self.data1, self.data2, self.data3"}
{"instruction": "Create a class ServiceMonitor that manages multiple resources and deletes them when done.", "output": "class ServiceMonitor:\n    def __init__(self):\n        self.svc1 = None\n        self.svc2 = None\n        self.svc3 = None\n\n    def open_resources(self):\n        self.svc1 = open('svc1.txt', 'r')\n        self.svc2 = open('svc2.txt', 'r')\n        self.svc3 = open('svc3.txt', 'r')\n\n    def close_resources(self):\n        del self.svc1, self.svc2, self.svc3"}
{"instruction": "Create a class FileManager that manages multiple resources and deletes them when done.", "output": "class FileManager:\n    def __init__(self):\n        self.file1 = None\n        self.file2 = None\n        self.file3 = None\n\n    def open_resources(self):\n        self.file1 = open('file1.txt', 'r')\n        self.file2 = open('file2.txt', 'r')\n        self.file3 = open('file3.txt', 'r')\n\n    def close_resources(self):\n        del self.file1, self.file2, self.file3"}
{"instruction": "Create a class ResourceHandler that manages multiple resources and deletes them when done.", "output": "class ResourceHandler:\n    def __init__(self):\n        self.conn1 = None\n        self.conn2 = None\n        self.conn3 = None\n\n    def open_resources(self):\n        self.conn1 = open('conn1.txt', 'r')\n        self.conn2 = open('conn2.txt', 'r')\n        self.conn3 = open('conn3.txt', 'r')\n\n    def close_resources(self):\n        del self.conn1, self.conn2, self.conn3"}
{"instruction": "Create a class ConnectionPool that manages multiple resources and deletes them when done.", "output": "class ConnectionPool:\n    def __init__(self):\n        self.img1 = None\n        self.img2 = None\n        self.img3 = None\n\n    def open_resources(self):\n        self.img1 = open('img1.txt', 'r')\n        self.img2 = open('img2.txt', 'r')\n        self.img3 = open('img3.txt', 'r')\n\n    def close_resources(self):\n        del self.img1, self.img2, self.img3"}
{"instruction": "Create a class ImageLoader that manages multiple resources and deletes them when done.", "output": "class ImageLoader:\n    def __init__(self):\n        self.stream1 = None\n        self.stream2 = None\n        self.stream3 = None\n\n    def open_resources(self):\n        self.stream1 = open('stream1.txt', 'r')\n        self.stream2 = open('stream2.txt', 'r')\n        self.stream3 = open('stream3.txt', 'r')\n\n    def close_resources(self):\n        del self.stream1, self.stream2, self.stream3"}
{"instruction": "Create a class StreamController that manages multiple resources and deletes them when done.", "output": "class StreamController:\n    def __init__(self):\n        self.res1 = None\n        self.res2 = None\n        self.res3 = None\n\n    def open_resources(self):\n        self.res1 = open('res1.txt', 'r')\n        self.res2 = open('res2.txt', 'r')\n        self.res3 = open('res3.txt', 'r')\n\n    def close_resources(self):\n        del self.res1, self.res2, self.res3"}
{"instruction": "Create a class DataAggregator that manages multiple resources and deletes them when done.", "output": "class DataAggregator:\n    def __init__(self):\n        self.buffer1 = None\n        self.buffer2 = None\n        self.buffer3 = None\n\n    def open_resources(self):\n        self.buffer1 = open('buffer1.txt', 'r')\n        self.buffer2 = open('buffer2.txt', 'r')\n        self.buffer3 = open('buffer3.txt', 'r')\n\n    def close_resources(self):\n        del self.buffer1, self.buffer2, self.buffer3"}
{"instruction": "Create a class DeviceManager that manages multiple resources and deletes them when done.", "output": "class DeviceManager:\n    def __init__(self):\n        self.audio1 = None\n        self.audio2 = None\n        self.audio3 = None\n\n    def open_resources(self):\n        self.audio1 = open('audio1.txt', 'r')\n        self.audio2 = open('audio2.txt', 'r')\n        self.audio3 = open('audio3.txt', 'r')\n\n    def close_resources(self):\n        del self.audio1, self.audio2, self.audio3"}
{"instruction": "Create a class BufferSystem that manages multiple resources and deletes them when done.", "output": "class BufferSystem:\n    def __init__(self):\n        self.device1 = None\n        self.device2 = None\n        self.device3 = None\n\n    def open_resources(self):\n        self.device1 = open('device1.txt', 'r')\n        self.device2 = open('device2.txt', 'r')\n        self.device3 = open('device3.txt', 'r')\n\n    def close_resources(self):\n        del self.device1, self.device2, self.device3"}
{"instruction": "Create a class AudioMixer that manages multiple resources and deletes them when done.", "output": "class AudioMixer:\n    def __init__(self):\n        self.data1 = None\n        self.data2 = None\n        self.data3 = None\n\n    def open_resources(self):\n        self.data1 = open('data1.txt', 'r')\n        self.data2 = open('data2.txt', 'r')\n        self.data3 = open('data3.txt', 'r')\n\n    def close_resources(self):\n        del self.data1, self.data2, self.data3"}
{"instruction": "Create a class ServiceMonitor that manages multiple resources and deletes them when done.", "output": "class ServiceMonitor:\n    def __init__(self):\n        self.svc1 = None\n        self.svc2 = None\n        self.svc3 = None\n\n    def open_resources(self):\n        self.svc1 = open('svc1.txt', 'r')\n        self.svc2 = open('svc2.txt', 'r')\n        self.svc3 = open('svc3.txt', 'r')\n\n    def close_resources(self):\n        del self.svc1, self.svc2, self.svc3"}
{"instruction": "Create a class FileManager that manages multiple resources and deletes them when done.", "output": "class FileManager:\n    def __init__(self):\n        self.file1 = None\n        self.file2 = None\n        self.file3 = None\n\n    def open_resources(self):\n        self.file1 = open('file1.txt', 'r')\n        self.file2 = open('file2.txt', 'r')\n        self.file3 = open('file3.txt', 'r')\n\n    def close_resources(self):\n        del self.file1, self.file2, self.file3"}
{"instruction": "Create a class ResourceHandler that manages multiple resources and deletes them when done.", "output": "class ResourceHandler:\n    def __init__(self):\n        self.conn1 = None\n        self.conn2 = None\n        self.conn3 = None\n\n    def open_resources(self):\n        self.conn1 = open('conn1.txt', 'r')\n        self.conn2 = open('conn2.txt', 'r')\n        self.conn3 = open('conn3.txt', 'r')\n\n    def close_resources(self):\n        del self.conn1, self.conn2, self.conn3"}
{"instruction": "Create a class ConnectionPool that manages multiple resources and deletes them when done.", "output": "class ConnectionPool:\n    def __init__(self):\n        self.img1 = None\n        self.img2 = None\n        self.img3 = None\n\n    def open_resources(self):\n        self.img1 = open('img1.txt', 'r')\n        self.img2 = open('img2.txt', 'r')\n        self.img3 = open('img3.txt', 'r')\n\n    def close_resources(self):\n        del self.img1, self.img2, self.img3"}
{"instruction": "Create a class ImageLoader that manages multiple resources and deletes them when done.", "output": "class ImageLoader:\n    def __init__(self):\n        self.stream1 = None\n        self.stream2 = None\n        self.stream3 = None\n\n    def open_resources(self):\n        self.stream1 = open('stream1.txt', 'r')\n        self.stream2 = open('stream2.txt', 'r')\n        self.stream3 = open('stream3.txt', 'r')\n\n    def close_resources(self):\n        del self.stream1, self.stream2, self.stream3"}
{"instruction": "Create a class StreamController that manages multiple resources and deletes them when done.", "output": "class StreamController:\n    def __init__(self):\n        self.res1 = None\n        self.res2 = None\n        self.res3 = None\n\n    def open_resources(self):\n        self.res1 = open('res1.txt', 'r')\n        self.res2 = open('res2.txt', 'r')\n        self.res3 = open('res3.txt', 'r')\n\n    def close_resources(self):\n        del self.res1, self.res2, self.res3"}
{"instruction": "Create a class DataAggregator that manages multiple resources and deletes them when done.", "output": "class DataAggregator:\n    def __init__(self):\n        self.buffer1 = None\n        self.buffer2 = None\n        self.buffer3 = None\n\n    def open_resources(self):\n        self.buffer1 = open('buffer1.txt', 'r')\n        self.buffer2 = open('buffer2.txt', 'r')\n        self.buffer3 = open('buffer3.txt', 'r')\n\n    def close_resources(self):\n        del self.buffer1, self.buffer2, self.buffer3"}
{"instruction": "Create a class DeviceManager that manages multiple resources and deletes them when done.", "output": "class DeviceManager:\n    def __init__(self):\n        self.audio1 = None\n        self.audio2 = None\n        self.audio3 = None\n\n    def open_resources(self):\n        self.audio1 = open('audio1.txt', 'r')\n        self.audio2 = open('audio2.txt', 'r')\n        self.audio3 = open('audio3.txt', 'r')\n\n    def close_resources(self):\n        del self.audio1, self.audio2, self.audio3"}
{"instruction": "Create a class BufferSystem that manages multiple resources and deletes them when done.", "output": "class BufferSystem:\n    def __init__(self):\n        self.device1 = None\n        self.device2 = None\n        self.device3 = None\n\n    def open_resources(self):\n        self.device1 = open('device1.txt', 'r')\n        self.device2 = open('device2.txt', 'r')\n        self.device3 = open('device3.txt', 'r')\n\n    def close_resources(self):\n        del self.device1, self.device2, self.device3"}
{"instruction": "Create a class AudioMixer that manages multiple resources and deletes them when done.", "output": "class AudioMixer:\n    def __init__(self):\n        self.data1 = None\n        self.data2 = None\n        self.data3 = None\n\n    def open_resources(self):\n        self.data1 = open('data1.txt', 'r')\n        self.data2 = open('data2.txt', 'r')\n        self.data3 = open('data3.txt', 'r')\n\n    def close_resources(self):\n        del self.data1, self.data2, self.data3"}
{"instruction": "Create a class ServiceMonitor that manages multiple resources and deletes them when done.", "output": "class ServiceMonitor:\n    def __init__(self):\n        self.svc1 = None\n        self.svc2 = None\n        self.svc3 = None\n\n    def open_resources(self):\n        self.svc1 = open('svc1.txt', 'r')\n        self.svc2 = open('svc2.txt', 'r')\n        self.svc3 = open('svc3.txt', 'r')\n\n    def close_resources(self):\n        del self.svc1, self.svc2, self.svc3"}
{"instruction": "Create a class FileManager that manages multiple resources and deletes them when done.", "output": "class FileManager:\n    def __init__(self):\n        self.file1 = None\n        self.file2 = None\n        self.file3 = None\n\n    def open_resources(self):\n        self.file1 = open('file1.txt', 'r')\n        self.file2 = open('file2.txt', 'r')\n        self.file3 = open('file3.txt', 'r')\n\n    def close_resources(self):\n        del self.file1, self.file2, self.file3"}
{"instruction": "Create a class ResourceHandler that manages multiple resources and deletes them when done.", "output": "class ResourceHandler:\n    def __init__(self):\n        self.conn1 = None\n        self.conn2 = None\n        self.conn3 = None\n\n    def open_resources(self):\n        self.conn1 = open('conn1.txt', 'r')\n        self.conn2 = open('conn2.txt', 'r')\n        self.conn3 = open('conn3.txt', 'r')\n\n    def close_resources(self):\n        del self.conn1, self.conn2, self.conn3"}
{"instruction": "Create a class ConnectionPool that manages multiple resources and deletes them when done.", "output": "class ConnectionPool:\n    def __init__(self):\n        self.img1 = None\n        self.img2 = None\n        self.img3 = None\n\n    def open_resources(self):\n        self.img1 = open('img1.txt', 'r')\n        self.img2 = open('img2.txt', 'r')\n        self.img3 = open('img3.txt', 'r')\n\n    def close_resources(self):\n        del self.img1, self.img2, self.img3"}
{"instruction": "Create a class ImageLoader that manages multiple resources and deletes them when done.", "output": "class ImageLoader:\n    def __init__(self):\n        self.stream1 = None\n        self.stream2 = None\n        self.stream3 = None\n\n    def open_resources(self):\n        self.stream1 = open('stream1.txt', 'r')\n        self.stream2 = open('stream2.txt', 'r')\n        self.stream3 = open('stream3.txt', 'r')\n\n    def close_resources(self):\n        del self.stream1, self.stream2, self.stream3"}
{"instruction": "Create a class StreamController that manages multiple resources and deletes them when done.", "output": "class StreamController:\n    def __init__(self):\n        self.res1 = None\n        self.res2 = None\n        self.res3 = None\n\n    def open_resources(self):\n        self.res1 = open('res1.txt', 'r')\n        self.res2 = open('res2.txt', 'r')\n        self.res3 = open('res3.txt', 'r')\n\n    def close_resources(self):\n        del self.res1, self.res2, self.res3"}
{"instruction": "Create a class DataAggregator that manages multiple resources and deletes them when done.", "output": "class DataAggregator:\n    def __init__(self):\n        self.buffer1 = None\n        self.buffer2 = None\n        self.buffer3 = None\n\n    def open_resources(self):\n        self.buffer1 = open('buffer1.txt', 'r')\n        self.buffer2 = open('buffer2.txt', 'r')\n        self.buffer3 = open('buffer3.txt', 'r')\n\n    def close_resources(self):\n        del self.buffer1, self.buffer2, self.buffer3"}
{"instruction": "Create a class DeviceManager that manages multiple resources and deletes them when done.", "output": "class DeviceManager:\n    def __init__(self):\n        self.audio1 = None\n        self.audio2 = None\n        self.audio3 = None\n\n    def open_resources(self):\n        self.audio1 = open('audio1.txt', 'r')\n        self.audio2 = open('audio2.txt', 'r')\n        self.audio3 = open('audio3.txt', 'r')\n\n    def close_resources(self):\n        del self.audio1, self.audio2, self.audio3"}
{"instruction": "Create a class BufferSystem that manages multiple resources and deletes them when done.", "output": "class BufferSystem:\n    def __init__(self):\n        self.device1 = None\n        self.device2 = None\n        self.device3 = None\n\n    def open_resources(self):\n        self.device1 = open('device1.txt', 'r')\n        self.device2 = open('device2.txt', 'r')\n        self.device3 = open('device3.txt', 'r')\n\n    def close_resources(self):\n        del self.device1, self.device2, self.device3"}
{"instruction": "Create a class AudioMixer that manages multiple resources and deletes them when done.", "output": "class AudioMixer:\n    def __init__(self):\n        self.data1 = None\n        self.data2 = None\n        self.data3 = None\n\n    def open_resources(self):\n        self.data1 = open('data1.txt', 'r')\n        self.data2 = open('data2.txt', 'r')\n        self.data3 = open('data3.txt', 'r')\n\n    def close_resources(self):\n        del self.data1, self.data2, self.data3"}
{"instruction": "Create a class ServiceMonitor that manages multiple resources and deletes them when done.", "output": "class ServiceMonitor:\n    def __init__(self):\n        self.svc1 = None\n        self.svc2 = None\n        self.svc3 = None\n\n    def open_resources(self):\n        self.svc1 = open('svc1.txt', 'r')\n        self.svc2 = open('svc2.txt', 'r')\n        self.svc3 = open('svc3.txt', 'r')\n\n    def close_resources(self):\n        del self.svc1, self.svc2, self.svc3"}
{"instruction": "Create a class FileManager that manages multiple resources and deletes them when done.", "output": "class FileManager:\n    def __init__(self):\n        self.file1 = None\n        self.file2 = None\n        self.file3 = None\n\n    def open_resources(self):\n        self.file1 = open('file1.txt', 'r')\n        self.file2 = open('file2.txt', 'r')\n        self.file3 = open('file3.txt', 'r')\n\n    def close_resources(self):\n        del self.file1, self.file2, self.file3"}
{"instruction": "Create a class ResourceHandler that manages multiple resources and deletes them when done.", "output": "class ResourceHandler:\n    def __init__(self):\n        self.conn1 = None\n        self.conn2 = None\n        self.conn3 = None\n\n    def open_resources(self):\n        self.conn1 = open('conn1.txt', 'r')\n        self.conn2 = open('conn2.txt', 'r')\n        self.conn3 = open('conn3.txt', 'r')\n\n    def close_resources(self):\n        del self.conn1, self.conn2, self.conn3"}
{"instruction": "Create a class ConnectionPool that manages multiple resources and deletes them when done.", "output": "class ConnectionPool:\n    def __init__(self):\n        self.img1 = None\n        self.img2 = None\n        self.img3 = None\n\n    def open_resources(self):\n        self.img1 = open('img1.txt', 'r')\n        self.img2 = open('img2.txt', 'r')\n        self.img3 = open('img3.txt', 'r')\n\n    def close_resources(self):\n        del self.img1, self.img2, self.img3"}
{"instruction": "Create a class ImageLoader that manages multiple resources and deletes them when done.", "output": "class ImageLoader:\n    def __init__(self):\n        self.stream1 = None\n        self.stream2 = None\n        self.stream3 = None\n\n    def open_resources(self):\n        self.stream1 = open('stream1.txt', 'r')\n        self.stream2 = open('stream2.txt', 'r')\n        self.stream3 = open('stream3.txt', 'r')\n\n    def close_resources(self):\n        del self.stream1, self.stream2, self.stream3"}
{"instruction": "Create a class StreamController that manages multiple resources and deletes them when done.", "output": "class StreamController:\n    def __init__(self):\n        self.res1 = None\n        self.res2 = None\n        self.res3 = None\n\n    def open_resources(self):\n        self.res1 = open('res1.txt', 'r')\n        self.res2 = open('res2.txt', 'r')\n        self.res3 = open('res3.txt', 'r')\n\n    def close_resources(self):\n        del self.res1, self.res2, self.res3"}
{"instruction": "Create a class DataAggregator that manages multiple resources and deletes them when done.", "output": "class DataAggregator:\n    def __init__(self):\n        self.buffer1 = None\n        self.buffer2 = None\n        self.buffer3 = None\n\n    def open_resources(self):\n        self.buffer1 = open('buffer1.txt', 'r')\n        self.buffer2 = open('buffer2.txt', 'r')\n        self.buffer3 = open('buffer3.txt', 'r')\n\n    def close_resources(self):\n        del self.buffer1, self.buffer2, self.buffer3"}
{"instruction": "Create a class DeviceManager that manages multiple resources and deletes them when done.", "output": "class DeviceManager:\n    def __init__(self):\n        self.audio1 = None\n        self.audio2 = None\n        self.audio3 = None\n\n    def open_resources(self):\n        self.audio1 = open('audio1.txt', 'r')\n        self.audio2 = open('audio2.txt', 'r')\n        self.audio3 = open('audio3.txt', 'r')\n\n    def close_resources(self):\n        del self.audio1, self.audio2, self.audio3"}
{"instruction": "Create a class BufferSystem that manages multiple resources and deletes them when done.", "output": "class BufferSystem:\n    def __init__(self):\n        self.device1 = None\n        self.device2 = None\n        self.device3 = None\n\n    def open_resources(self):\n        self.device1 = open('device1.txt', 'r')\n        self.device2 = open('device2.txt', 'r')\n        self.device3 = open('device3.txt', 'r')\n\n    def close_resources(self):\n        del self.device1, self.device2, self.device3"}
{"instruction": "Create a class AudioMixer that manages multiple resources and deletes them when done.", "output": "class AudioMixer:\n    def __init__(self):\n        self.data1 = None\n        self.data2 = None\n        self.data3 = None\n\n    def open_resources(self):\n        self.data1 = open('data1.txt', 'r')\n        self.data2 = open('data2.txt', 'r')\n        self.data3 = open('data3.txt', 'r')\n\n    def close_resources(self):\n        del self.data1, self.data2, self.data3"}
{"instruction": "Create a class ServiceMonitor that manages multiple resources and deletes them when done.", "output": "class ServiceMonitor:\n    def __init__(self):\n        self.svc1 = None\n        self.svc2 = None\n        self.svc3 = None\n\n    def open_resources(self):\n        self.svc1 = open('svc1.txt', 'r')\n        self.svc2 = open('svc2.txt', 'r')\n        self.svc3 = open('svc3.txt', 'r')\n\n    def close_resources(self):\n        del self.svc1, self.svc2, self.svc3"}
{"instruction": "Create a class FileManager that manages multiple resources and deletes them when done.", "output": "class FileManager:\n    def __init__(self):\n        self.file1 = None\n        self.file2 = None\n        self.file3 = None\n\n    def open_resources(self):\n        self.file1 = open('file1.txt', 'r')\n        self.file2 = open('file2.txt', 'r')\n        self.file3 = open('file3.txt', 'r')\n\n    def close_resources(self):\n        del self.file1, self.file2, self.file3"}
{"instruction": "Create a class ResourceHandler that manages multiple resources and deletes them when done.", "output": "class ResourceHandler:\n    def __init__(self):\n        self.conn1 = None\n        self.conn2 = None\n        self.conn3 = None\n\n    def open_resources(self):\n        self.conn1 = open('conn1.txt', 'r')\n        self.conn2 = open('conn2.txt', 'r')\n        self.conn3 = open('conn3.txt', 'r')\n\n    def close_resources(self):\n        del self.conn1, self.conn2, self.conn3"}
{"instruction": "Create a class ConnectionPool that manages multiple resources and deletes them when done.", "output": "class ConnectionPool:\n    def __init__(self):\n        self.img1 = None\n        self.img2 = None\n        self.img3 = None\n\n    def open_resources(self):\n        self.img1 = open('img1.txt', 'r')\n        self.img2 = open('img2.txt', 'r')\n        self.img3 = open('img3.txt', 'r')\n\n    def close_resources(self):\n        del self.img1, self.img2, self.img3"}
{"instruction": "Create a class ImageLoader that manages multiple resources and deletes them when done.", "output": "class ImageLoader:\n    def __init__(self):\n        self.stream1 = None\n        self.stream2 = None\n        self.stream3 = None\n\n    def open_resources(self):\n        self.stream1 = open('stream1.txt', 'r')\n        self.stream2 = open('stream2.txt', 'r')\n        self.stream3 = open('stream3.txt', 'r')\n\n    def close_resources(self):\n        del self.stream1, self.stream2, self.stream3"}
{"instruction": "Create a class StreamController that manages multiple resources and deletes them when done.", "output": "class StreamController:\n    def __init__(self):\n        self.res1 = None\n        self.res2 = None\n        self.res3 = None\n\n    def open_resources(self):\n        self.res1 = open('res1.txt', 'r')\n        self.res2 = open('res2.txt', 'r')\n        self.res3 = open('res3.txt', 'r')\n\n    def close_resources(self):\n        del self.res1, self.res2, self.res3"}
{"instruction": "Create a class DataAggregator that manages multiple resources and deletes them when done.", "output": "class DataAggregator:\n    def __init__(self):\n        self.buffer1 = None\n        self.buffer2 = None\n        self.buffer3 = None\n\n    def open_resources(self):\n        self.buffer1 = open('buffer1.txt', 'r')\n        self.buffer2 = open('buffer2.txt', 'r')\n        self.buffer3 = open('buffer3.txt', 'r')\n\n    def close_resources(self):\n        del self.buffer1, self.buffer2, self.buffer3"}
{"instruction": "Create a class DeviceManager that manages multiple resources and deletes them when done.", "output": "class DeviceManager:\n    def __init__(self):\n        self.audio1 = None\n        self.audio2 = None\n        self.audio3 = None\n\n    def open_resources(self):\n        self.audio1 = open('audio1.txt', 'r')\n        self.audio2 = open('audio2.txt', 'r')\n        self.audio3 = open('audio3.txt', 'r')\n\n    def close_resources(self):\n        del self.audio1, self.audio2, self.audio3"}
{"instruction": "Create a class BufferSystem that manages multiple resources and deletes them when done.", "output": "class BufferSystem:\n    def __init__(self):\n        self.device1 = None\n        self.device2 = None\n        self.device3 = None\n\n    def open_resources(self):\n        self.device1 = open('device1.txt', 'r')\n        self.device2 = open('device2.txt', 'r')\n        self.device3 = open('device3.txt', 'r')\n\n    def close_resources(self):\n        del self.device1, self.device2, self.device3"}
{"instruction": "Create a class AudioMixer that manages multiple resources and deletes them when done.", "output": "class AudioMixer:\n    def __init__(self):\n        self.data1 = None\n        self.data2 = None\n        self.data3 = None\n\n    def open_resources(self):\n        self.data1 = open('data1.txt', 'r')\n        self.data2 = open('data2.txt', 'r')\n        self.data3 = open('data3.txt', 'r')\n\n    def close_resources(self):\n        del self.data1, self.data2, self.data3"}
{"instruction": "Create a class ServiceMonitor that manages multiple resources and deletes them when done.", "output": "class ServiceMonitor:\n    def __init__(self):\n        self.svc1 = None\n        self.svc2 = None\n        self.svc3 = None\n\n    def open_resources(self):\n        self.svc1 = open('svc1.txt', 'r')\n        self.svc2 = open('svc2.txt', 'r')\n        self.svc3 = open('svc3.txt', 'r')\n\n    def close_resources(self):\n        del self.svc1, self.svc2, self.svc3"}
{"instruction": "Select products with score > 90 and store them in a new dictionary.", "output": "def filter_products(data):\n    return {key: value for key, value in data.items() if value['score'] > 90}"}
{"instruction": "Select students with price < 50 and store them in a new dictionary.", "output": "def filter_students(data):\n    return {key: value for key, value in data.items() if value['price'] < 50}"}
{"instruction": "Select employees with age >= 18 and store them in a new dictionary.", "output": "def filter_employees(data):\n    return {key: value for key, value in data.items() if value['age'] >= 18}"}
{"instruction": "Select items with rating == 5 and store them in a new dictionary.", "output": "def filter_items(data):\n    return {key: value for key, value in data.items() if value['rating'] == 5}"}
{"instruction": "Select books with quantity <= 10 and store them in a new dictionary.", "output": "def filter_books(data):\n    return {key: value for key, value in data.items() if value['quantity'] <= 10}"}
{"instruction": "Select movies with discount != 0 and store them in a new dictionary.", "output": "def filter_movies(data):\n    return {key: value for key, value in data.items() if value['discount'] != 0}"}
{"instruction": "Select cars with duration > 120 and store them in a new dictionary.", "output": "def filter_cars(data):\n    return {key: value for key, value in data.items() if value['duration'] > 120}"}
{"instruction": "Select devices with salary < 3000 and store them in a new dictionary.", "output": "def filter_devices(data):\n    return {key: value for key, value in data.items() if value['salary'] < 3000}"}
{"instruction": "Select entrys with height >= 170 and store them in a new dictionary.", "output": "def filter_entrys(data):\n    return {key: value for key, value in data.items() if value['height'] >= 170}"}
{"instruction": "Select records with pages > 300 and store them in a new dictionary.", "output": "def filter_records(data):\n    return {key: value for key, value in data.items() if value['pages'] > 300}"}
{"instruction": "Select products with score > 90 and store them in a new dictionary.", "output": "def filter_products(data):\n    return {key: value for key, value in data.items() if value['score'] > 90}"}
{"instruction": "Select students with price < 50 and store them in a new dictionary.", "output": "def filter_students(data):\n    return {key: value for key, value in data.items() if value['price'] < 50}"}
{"instruction": "Select employees with age >= 18 and store them in a new dictionary.", "output": "def filter_employees(data):\n    return {key: value for key, value in data.items() if value['age'] >= 18}"}
{"instruction": "Select items with rating == 5 and store them in a new dictionary.", "output": "def filter_items(data):\n    return {key: value for key, value in data.items() if value['rating'] == 5}"}
{"instruction": "Select books with quantity <= 10 and store them in a new dictionary.", "output": "def filter_books(data):\n    return {key: value for key, value in data.items() if value['quantity'] <= 10}"}
{"instruction": "Select movies with discount != 0 and store them in a new dictionary.", "output": "def filter_movies(data):\n    return {key: value for key, value in data.items() if value['discount'] != 0}"}
{"instruction": "Select cars with duration > 120 and store them in a new dictionary.", "output": "def filter_cars(data):\n    return {key: value for key, value in data.items() if value['duration'] > 120}"}
{"instruction": "Select devices with salary < 3000 and store them in a new dictionary.", "output": "def filter_devices(data):\n    return {key: value for key, value in data.items() if value['salary'] < 3000}"}
{"instruction": "Select entrys with height >= 170 and store them in a new dictionary.", "output": "def filter_entrys(data):\n    return {key: value for key, value in data.items() if value['height'] >= 170}"}
{"instruction": "Select records with pages > 300 and store them in a new dictionary.", "output": "def filter_records(data):\n    return {key: value for key, value in data.items() if value['pages'] > 300}"}
{"instruction": "Select products with score > 90 and store them in a new dictionary.", "output": "def filter_products(data):\n    return {key: value for key, value in data.items() if value['score'] > 90}"}
{"instruction": "Select students with price < 50 and store them in a new dictionary.", "output": "def filter_students(data):\n    return {key: value for key, value in data.items() if value['price'] < 50}"}
{"instruction": "Select employees with age >= 18 and store them in a new dictionary.", "output": "def filter_employees(data):\n    return {key: value for key, value in data.items() if value['age'] >= 18}"}
{"instruction": "Select items with rating == 5 and store them in a new dictionary.", "output": "def filter_items(data):\n    return {key: value for key, value in data.items() if value['rating'] == 5}"}
{"instruction": "Select books with quantity <= 10 and store them in a new dictionary.", "output": "def filter_books(data):\n    return {key: value for key, value in data.items() if value['quantity'] <= 10}"}
{"instruction": "Select movies with discount != 0 and store them in a new dictionary.", "output": "def filter_movies(data):\n    return {key: value for key, value in data.items() if value['discount'] != 0}"}
{"instruction": "Select cars with duration > 120 and store them in a new dictionary.", "output": "def filter_cars(data):\n    return {key: value for key, value in data.items() if value['duration'] > 120}"}
{"instruction": "Select devices with salary < 3000 and store them in a new dictionary.", "output": "def filter_devices(data):\n    return {key: value for key, value in data.items() if value['salary'] < 3000}"}
{"instruction": "Select entrys with height >= 170 and store them in a new dictionary.", "output": "def filter_entrys(data):\n    return {key: value for key, value in data.items() if value['height'] >= 170}"}
{"instruction": "Select records with pages > 300 and store them in a new dictionary.", "output": "def filter_records(data):\n    return {key: value for key, value in data.items() if value['pages'] > 300}"}
{"instruction": "Select products with score > 90 and store them in a new dictionary.", "output": "def filter_products(data):\n    return {key: value for key, value in data.items() if value['score'] > 90}"}
{"instruction": "Select students with price < 50 and store them in a new dictionary.", "output": "def filter_students(data):\n    return {key: value for key, value in data.items() if value['price'] < 50}"}
{"instruction": "Select employees with age >= 18 and store them in a new dictionary.", "output": "def filter_employees(data):\n    return {key: value for key, value in data.items() if value['age'] >= 18}"}
{"instruction": "Select items with rating == 5 and store them in a new dictionary.", "output": "def filter_items(data):\n    return {key: value for key, value in data.items() if value['rating'] == 5}"}
{"instruction": "Select books with quantity <= 10 and store them in a new dictionary.", "output": "def filter_books(data):\n    return {key: value for key, value in data.items() if value['quantity'] <= 10}"}
{"instruction": "Select movies with discount != 0 and store them in a new dictionary.", "output": "def filter_movies(data):\n    return {key: value for key, value in data.items() if value['discount'] != 0}"}
{"instruction": "Select cars with duration > 120 and store them in a new dictionary.", "output": "def filter_cars(data):\n    return {key: value for key, value in data.items() if value['duration'] > 120}"}
{"instruction": "Select devices with salary < 3000 and store them in a new dictionary.", "output": "def filter_devices(data):\n    return {key: value for key, value in data.items() if value['salary'] < 3000}"}
{"instruction": "Select entrys with height >= 170 and store them in a new dictionary.", "output": "def filter_entrys(data):\n    return {key: value for key, value in data.items() if value['height'] >= 170}"}
{"instruction": "Select records with pages > 300 and store them in a new dictionary.", "output": "def filter_records(data):\n    return {key: value for key, value in data.items() if value['pages'] > 300}"}
{"instruction": "Select products with score > 90 and store them in a new dictionary.", "output": "def filter_products(data):\n    return {key: value for key, value in data.items() if value['score'] > 90}"}
{"instruction": "Select students with price < 50 and store them in a new dictionary.", "output": "def filter_students(data):\n    return {key: value for key, value in data.items() if value['price'] < 50}"}
{"instruction": "Select employees with age >= 18 and store them in a new dictionary.", "output": "def filter_employees(data):\n    return {key: value for key, value in data.items() if value['age'] >= 18}"}
{"instruction": "Select items with rating == 5 and store them in a new dictionary.", "output": "def filter_items(data):\n    return {key: value for key, value in data.items() if value['rating'] == 5}"}
{"instruction": "Select books with quantity <= 10 and store them in a new dictionary.", "output": "def filter_books(data):\n    return {key: value for key, value in data.items() if value['quantity'] <= 10}"}
{"instruction": "Select movies with discount != 0 and store them in a new dictionary.", "output": "def filter_movies(data):\n    return {key: value for key, value in data.items() if value['discount'] != 0}"}
{"instruction": "Select cars with duration > 120 and store them in a new dictionary.", "output": "def filter_cars(data):\n    return {key: value for key, value in data.items() if value['duration'] > 120}"}
{"instruction": "Select devices with salary < 3000 and store them in a new dictionary.", "output": "def filter_devices(data):\n    return {key: value for key, value in data.items() if value['salary'] < 3000}"}
{"instruction": "Select entrys with height >= 170 and store them in a new dictionary.", "output": "def filter_entrys(data):\n    return {key: value for key, value in data.items() if value['height'] >= 170}"}
{"instruction": "Select records with pages > 300 and store them in a new dictionary.", "output": "def filter_records(data):\n    return {key: value for key, value in data.items() if value['pages'] > 300}"}
{"instruction": "Select products with score > 90 and store them in a new dictionary.", "output": "def filter_products(data):\n    return {key: value for key, value in data.items() if value['score'] > 90}"}
{"instruction": "Select students with price < 50 and store them in a new dictionary.", "output": "def filter_students(data):\n    return {key: value for key, value in data.items() if value['price'] < 50}"}
{"instruction": "Select employees with age >= 18 and store them in a new dictionary.", "output": "def filter_employees(data):\n    return {key: value for key, value in data.items() if value['age'] >= 18}"}
{"instruction": "Select items with rating == 5 and store them in a new dictionary.", "output": "def filter_items(data):\n    return {key: value for key, value in data.items() if value['rating'] == 5}"}
{"instruction": "Select books with quantity <= 10 and store them in a new dictionary.", "output": "def filter_books(data):\n    return {key: value for key, value in data.items() if value['quantity'] <= 10}"}
{"instruction": "Select movies with discount != 0 and store them in a new dictionary.", "output": "def filter_movies(data):\n    return {key: value for key, value in data.items() if value['discount'] != 0}"}
{"instruction": "Select cars with duration > 120 and store them in a new dictionary.", "output": "def filter_cars(data):\n    return {key: value for key, value in data.items() if value['duration'] > 120}"}
{"instruction": "Select devices with salary < 3000 and store them in a new dictionary.", "output": "def filter_devices(data):\n    return {key: value for key, value in data.items() if value['salary'] < 3000}"}
{"instruction": "Select entrys with height >= 170 and store them in a new dictionary.", "output": "def filter_entrys(data):\n    return {key: value for key, value in data.items() if value['height'] >= 170}"}
{"instruction": "Select records with pages > 300 and store them in a new dictionary.", "output": "def filter_records(data):\n    return {key: value for key, value in data.items() if value['pages'] > 300}"}
{"instruction": "Select products with score > 90 and store them in a new dictionary.", "output": "def filter_products(data):\n    return {key: value for key, value in data.items() if value['score'] > 90}"}
{"instruction": "Select students with price < 50 and store them in a new dictionary.", "output": "def filter_students(data):\n    return {key: value for key, value in data.items() if value['price'] < 50}"}
{"instruction": "Select employees with age >= 18 and store them in a new dictionary.", "output": "def filter_employees(data):\n    return {key: value for key, value in data.items() if value['age'] >= 18}"}
{"instruction": "Select items with rating == 5 and store them in a new dictionary.", "output": "def filter_items(data):\n    return {key: value for key, value in data.items() if value['rating'] == 5}"}
{"instruction": "Select books with quantity <= 10 and store them in a new dictionary.", "output": "def filter_books(data):\n    return {key: value for key, value in data.items() if value['quantity'] <= 10}"}
{"instruction": "Select movies with discount != 0 and store them in a new dictionary.", "output": "def filter_movies(data):\n    return {key: value for key, value in data.items() if value['discount'] != 0}"}
{"instruction": "Select cars with duration > 120 and store them in a new dictionary.", "output": "def filter_cars(data):\n    return {key: value for key, value in data.items() if value['duration'] > 120}"}
{"instruction": "Select devices with salary < 3000 and store them in a new dictionary.", "output": "def filter_devices(data):\n    return {key: value for key, value in data.items() if value['salary'] < 3000}"}
{"instruction": "Select entrys with height >= 170 and store them in a new dictionary.", "output": "def filter_entrys(data):\n    return {key: value for key, value in data.items() if value['height'] >= 170}"}
{"instruction": "Select records with pages > 300 and store them in a new dictionary.", "output": "def filter_records(data):\n    return {key: value for key, value in data.items() if value['pages'] > 300}"}
{"instruction": "Select products with score > 90 and store them in a new dictionary.", "output": "def filter_products(data):\n    return {key: value for key, value in data.items() if value['score'] > 90}"}
{"instruction": "Select students with price < 50 and store them in a new dictionary.", "output": "def filter_students(data):\n    return {key: value for key, value in data.items() if value['price'] < 50}"}
{"instruction": "Select employees with age >= 18 and store them in a new dictionary.", "output": "def filter_employees(data):\n    return {key: value for key, value in data.items() if value['age'] >= 18}"}
{"instruction": "Select items with rating == 5 and store them in a new dictionary.", "output": "def filter_items(data):\n    return {key: value for key, value in data.items() if value['rating'] == 5}"}
{"instruction": "Select books with quantity <= 10 and store them in a new dictionary.", "output": "def filter_books(data):\n    return {key: value for key, value in data.items() if value['quantity'] <= 10}"}
{"instruction": "Select movies with discount != 0 and store them in a new dictionary.", "output": "def filter_movies(data):\n    return {key: value for key, value in data.items() if value['discount'] != 0}"}
{"instruction": "Select cars with duration > 120 and store them in a new dictionary.", "output": "def filter_cars(data):\n    return {key: value for key, value in data.items() if value['duration'] > 120}"}
{"instruction": "Select devices with salary < 3000 and store them in a new dictionary.", "output": "def filter_devices(data):\n    return {key: value for key, value in data.items() if value['salary'] < 3000}"}
{"instruction": "Select entrys with height >= 170 and store them in a new dictionary.", "output": "def filter_entrys(data):\n    return {key: value for key, value in data.items() if value['height'] >= 170}"}
{"instruction": "Select records with pages > 300 and store them in a new dictionary.", "output": "def filter_records(data):\n    return {key: value for key, value in data.items() if value['pages'] > 300}"}
{"instruction": "Select products with score > 90 and store them in a new dictionary.", "output": "def filter_products(data):\n    return {key: value for key, value in data.items() if value['score'] > 90}"}
{"instruction": "Select students with price < 50 and store them in a new dictionary.", "output": "def filter_students(data):\n    return {key: value for key, value in data.items() if value['price'] < 50}"}
{"instruction": "Select employees with age >= 18 and store them in a new dictionary.", "output": "def filter_employees(data):\n    return {key: value for key, value in data.items() if value['age'] >= 18}"}
{"instruction": "Select items with rating == 5 and store them in a new dictionary.", "output": "def filter_items(data):\n    return {key: value for key, value in data.items() if value['rating'] == 5}"}
{"instruction": "Select books with quantity <= 10 and store them in a new dictionary.", "output": "def filter_books(data):\n    return {key: value for key, value in data.items() if value['quantity'] <= 10}"}
{"instruction": "Select movies with discount != 0 and store them in a new dictionary.", "output": "def filter_movies(data):\n    return {key: value for key, value in data.items() if value['discount'] != 0}"}
{"instruction": "Select cars with duration > 120 and store them in a new dictionary.", "output": "def filter_cars(data):\n    return {key: value for key, value in data.items() if value['duration'] > 120}"}
{"instruction": "Select devices with salary < 3000 and store them in a new dictionary.", "output": "def filter_devices(data):\n    return {key: value for key, value in data.items() if value['salary'] < 3000}"}
{"instruction": "Select entrys with height >= 170 and store them in a new dictionary.", "output": "def filter_entrys(data):\n    return {key: value for key, value in data.items() if value['height'] >= 170}"}
{"instruction": "Select records with pages > 300 and store them in a new dictionary.", "output": "def filter_records(data):\n    return {key: value for key, value in data.items() if value['pages'] > 300}"}
{"instruction": "Select products with score > 90 and store them in a new dictionary.", "output": "def filter_products(data):\n    return {key: value for key, value in data.items() if value['score'] > 90}"}
{"instruction": "Select students with price < 50 and store them in a new dictionary.", "output": "def filter_students(data):\n    return {key: value for key, value in data.items() if value['price'] < 50}"}
{"instruction": "Select employees with age >= 18 and store them in a new dictionary.", "output": "def filter_employees(data):\n    return {key: value for key, value in data.items() if value['age'] >= 18}"}
{"instruction": "Select items with rating == 5 and store them in a new dictionary.", "output": "def filter_items(data):\n    return {key: value for key, value in data.items() if value['rating'] == 5}"}
{"instruction": "Select books with quantity <= 10 and store them in a new dictionary.", "output": "def filter_books(data):\n    return {key: value for key, value in data.items() if value['quantity'] <= 10}"}
{"instruction": "Select movies with discount != 0 and store them in a new dictionary.", "output": "def filter_movies(data):\n    return {key: value for key, value in data.items() if value['discount'] != 0}"}
{"instruction": "Select cars with duration > 120 and store them in a new dictionary.", "output": "def filter_cars(data):\n    return {key: value for key, value in data.items() if value['duration'] > 120}"}
{"instruction": "Select devices with salary < 3000 and store them in a new dictionary.", "output": "def filter_devices(data):\n    return {key: value for key, value in data.items() if value['salary'] < 3000}"}
{"instruction": "Select entrys with height >= 170 and store them in a new dictionary.", "output": "def filter_entrys(data):\n    return {key: value for key, value in data.items() if value['height'] >= 170}"}
{"instruction": "Select records with pages > 300 and store them in a new dictionary.", "output": "def filter_records(data):\n    return {key: value for key, value in data.items() if value['pages'] > 300}"}
{"instruction": "Write a function to check if the given number is woodball or not.", "output": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx += 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx /= 2\r\n\t\tp += 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False"}
{"instruction": "Write a function to convert the given binary number to its decimal equivalent.", "output": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal += dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)"}
{"instruction": "Write a python function to find the product of non-repeated elements in a given array.", "output": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod *= arr[i] \r\n    return prod; "}
{"instruction": "Write a python function to find the largest prime factor of a given number.", "output": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n /= i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)"}
{"instruction": "Write a python function to find the largest number that can be formed with the given digits.", "output": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num *= 10 + arr[i] \r\n    return num "}
{"instruction": "Write a function of recursion list sum.", "output": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal += recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal += element\r\n\treturn total"}
{"instruction": "Write a python function to find the character made by adding all the characters of the given string.", "output": "def get_Char(strr):  \r\n    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ %= 26\r\n        return chr(ord('a') + summ - 1)"}
{"instruction": "Write a python function to find the count of rotations of a binary string with odd value.", "output": "def odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count += 1\r\n    return count "}
{"instruction": "Write a python function to find the element that appears only once in a sorted array.", "output": "def search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR ^= arr[i]\r\n    return (XOR)"}
{"instruction": "Write a function to find n\u2019th smart number.", "output": "MAX = 3000 \r\ndef smartNumber(n): \r\n\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj += i \r\n\tresult.sort() \r\n\treturn result[n - 1] "}
{"instruction": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.", "output": "def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum += arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      "}
{"instruction": "Write a function to divide a number into two parts such that the sum of digits is maximum.", "output": "def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans *= 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) "}
{"instruction": "Write a python function to toggle all even bits of a given number.", "output": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count += 1\r\n        temp >>= 1 \r\n    return n ^ res "}
{"instruction": "Write a function to find x and y that satisfies ax + by = n.", "output": "def solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti += 1\r\n\treturn (\"No solution\") "}
{"instruction": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item", "output": "def count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count += 1\r\n  return count"}
{"instruction": "Write a python function to convert octal number to decimal number.", "output": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base *= 8; \r\n    return dec_value; "}
{"instruction": "Write a function to remove even characters in a string.", "output": "def remove_even(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 += str1[i - 1]\r\n return str2"}
{"instruction": "Write a python function to count the occurrence of a given character in a string.", "output": "def count(s,c) : \r\n    res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res += 1\r\n    return res "}
{"instruction": "Write a python function to remove the characters which have odd index values of a given string.", "output": "def odd_values_string(str):\r\n  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result += str[i]\r\n  return result"}
{"instruction": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.", "output": "def re_arrange_array(arr, n):\r\n  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j += 1\r\n  return arr"}
{"instruction": "Write a function to count total characters in a string.", "output": "def count_charac(str1):\r\n total = 0\r\n for i in str1:\r\n    total += 1\r\n return total"}
{"instruction": "Write a python function to count the occcurences of an element in a tuple.", "output": "def count_X(tup, x): \r\n    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count += 1\r\n    return count "}
{"instruction": "Write a python function to count integers from a given list.", "output": "def count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr += 1\r\n    return ctr"}
{"instruction": "Write a function to search an element in the given array by using sequential search.", "output": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos += 1\r\n    return found, pos"}
{"instruction": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.", "output": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here += a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far"}
{"instruction": "Write a function to count array elements having modular inverse under given prime number p equal to itself.", "output": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element += 1\r\n\treturn current_element"}
{"instruction": "Write a python function to find element at a given index after number of rotations.", "output": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index -= 1 \r\n    return arr[index] "}
{"instruction": "Write a function to find the demlo number for the given number.", "output": "def find_demlo(s): \r\n\tl = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres += str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres += str(i) \r\n\treturn res \t"}
{"instruction": "Write a python function to count unset bits of a given number.", "output": "def count_unset_bits(n): \r\n    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x <<= 1\r\n    return count  "}
{"instruction": "Write a function to calculate the number of digits and letters in a string.", "output": "def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d += 1\r\n    elif c.isalpha():\r\n        l += 1\r\n    else:\r\n        pass\r\n return (l,d)"}
{"instruction": "Write a python function to toggle all odd bits of a given number.", "output": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count += 1\r\n        temp >>= 1 \r\n    return n ^ res "}
{"instruction": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).", "output": "def get_max_sum (n):\r\n\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti += 1\r\n\treturn res[n]"}
{"instruction": "Write a function to remove odd characters in a string.", "output": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 += str1[i - 1]\r\n return str2"}
{"instruction": "Write a function to calculate the sum of perrin numbers.", "output": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum += d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn -= 1\r\n\treturn sum"}
{"instruction": "Write a python function to find the sum of even factors of a number.", "output": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count += 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term *= i \r\n            curr_sum += curr_term \r\n        res *= curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res "}
{"instruction": "Write a function to find the maximum product subarray of the given array.", "output": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here *= arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far"}
{"instruction": "Write a python function to convert decimal number to octal number.", "output": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval *= 10;\r\n        deciNum //= 8; \r\n    return (octalNum)"}
{"instruction": "Write a python function to find the first digit of a given number.", "output": "def first_Digit(n) :  \r\n    while n >= 10:  \r\n        n /= 10; \r\n    return int(n) "}
{"instruction": "Write a python function to find the first natural number whose factorial is divisible by x.", "output": "def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact *= i \r\n        if (fact % x == 0): \r\n            break\r\n    return i "}
{"instruction": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.", "output": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx -= w\r\n    starty -= h\r\n    endx += w\r\n    endy += h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons"}
{"instruction": "Write a function to move all zeroes to the end of the given array.", "output": "def re_order(A):\r\n    k = 0\r\n    for i in A:\r\n        if i:\r\n            A[k] = i\r\n            k += 1\r\n    for i in range(k, len(A)):\r\n        A[i] = 0\r\n    return A"}
{"instruction": "Write a python function to find the average of odd numbers till a given odd number.", "output": "def average_Odd(n) : \r\n    if (n%2==0) : \r\n        return (\"Invalid Input\") \r\n        return -1 \r\n    sm =0\r\n    count =0\r\n    while (n>=1) : \r\n        count += 1\r\n        sm += n \r\n        n -= 2\r\n    return sm//count "}
{"instruction": "Write a function to find if the given number is abundant or not.", "output": "import math \r\ndef get_sum(n): \r\n\tsum = 0\r\n\ti = 1\r\n\twhile i <= (math.sqrt(n)): \r\n\t\tif n%i == 0: \r\n\t\t\tif n/i == i : \r\n\t\t\t\tsum += i \r\n\t\t\telse: \r\n\t\t\t\tsum += i \r\n\t\t\t\tsum = sum + (n / i ) \r\n\t\ti += 1\r\n\tsum -= n \r\n\treturn sum\r\ndef check_abundant(n): \r\n\tif (get_sum(n) > n): \r\n\t\treturn True\r\n\telse: \r\n\t\treturn False"}
{"instruction": "Write a function to add two numbers and print number of digits of sum.", "output": "def count_digits(num1,num2):\r\n    number=num1+num2\r\n    count = 0\r\n    while(number > 0):\r\n        number = number // 10\r\n        count += 1\r\n    return count"}
{"instruction": "Write a python function to toggle only first and last bits of a given number.", "output": "def take_L_and_F_set_bits(n) : \r\n    n |= n >> 1\r\n    n |= n >> 2\r\n    n |= n >> 4\r\n    n |= n >> 8\r\n    n |= n >> 16 \r\n    return ((n + 1) >> 1) + 1      \r\ndef toggle_F_and_L_bits(n) :  \r\n    if (n == 1) : \r\n        return 0 \r\n    return n ^ take_L_and_F_set_bits(n) "}
{"instruction": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.", "output": "def Total_Hamming_Distance(n):   \r\n    i = 1\r\n    sum = 0\r\n    while (n // i > 0):  \r\n        sum += n // i  \r\n        i *= 2     \r\n    return sum"}
{"instruction": "Write a function to find the largest sum of contiguous subarray in the given array.", "output": "def max_sub_array_sum(a, size):\r\n  max_so_far = 0\r\n  max_ending_here = 0\r\n  for i in range(0, size):\r\n    max_ending_here += a[i]\r\n    if max_ending_here < 0:\r\n      max_ending_here = 0\r\n    elif (max_so_far < max_ending_here):\r\n      max_so_far = max_ending_here\r\n  return max_so_far"}
{"instruction": "Write a python function to check whether an array is subarray of another or not.", "output": "def is_Sub_Array(A,B,n,m): \r\n    i = 0; j = 0; \r\n    while (i < n and j < m):  \r\n        if (A[i] == B[j]): \r\n            i += 1; \r\n            j += 1; \r\n            if (j == m): \r\n                return True;  \r\n        else: \r\n            i -= j + 1; \r\n            j = 0;       \r\n    return False; "}
{"instruction": "Write a function to find perfect squares between two given numbers.", "output": "def perfect_squares(a, b):\r\n    lists=[]\r\n    for i in range (a,b+1):\r\n        j = 1;\r\n        while j*j <= i:\r\n            if j*j == i:\r\n                 lists.append(i)  \r\n            j += 1\r\n        i += 1\r\n    return lists"}
{"instruction": "Write a function to check whether the given number is armstrong or not.", "output": "def armstrong_number(number):\r\n sum = 0\r\n times = 0\r\n temp = number\r\n while temp > 0:\r\n           times += 1\r\n           temp = temp // 10\r\n temp = number\r\n while temp > 0:\r\n           reminder = temp % 10\r\n           sum = sum + (reminder ** times)\r\n           temp //= 10\r\n if number == sum:\r\n           return True\r\n else:\r\n           return False"}
{"instruction": "Write a function to find sum and average of first n natural numbers.", "output": "def sum_average(number):\r\n total = 0\r\n for value in range(1, number + 1):\r\n    total += value\r\n average = total / number\r\n return (total,average)"}
{"instruction": "Write a function to get a lucid number smaller than or equal to n.", "output": "def get_ludic(n):\r\n\tludics = []\r\n\tfor i in range(1, n + 1):\r\n\t\tludics.append(i)\r\n\tindex = 1\r\n\twhile(index != len(ludics)):\r\n\t\tfirst_ludic = ludics[index]\r\n\t\tremove_index = index + first_ludic\r\n\t\twhile(remove_index < len(ludics)):\r\n\t\t\tludics.remove(ludics[remove_index])\r\n\t\t\tremove_index += first_ludic - 1\r\n\t\tindex += 1\r\n\treturn ludics"}
{"instruction": "Write a python function to find the minimum sum of absolute differences of two arrays.", "output": "def find_Min_Sum(a,b,n): \r\n    a.sort() \r\n    b.sort() \r\n    sum = 0  \r\n    for i in range(n): \r\n        sum += abs(a[i] - b[i]) \r\n    return sum"}
{"instruction": "Write a python function to find the first digit in factorial of a given number.", "output": "import math \r\ndef first_Digit(n) : \r\n    fact = 1\r\n    for i in range(2,n + 1) : \r\n        fact *= i \r\n        while (fact % 10 == 0) :  \r\n            fact = int(fact / 10) \r\n    while (fact >= 10) : \r\n        fact = int(fact / 10) \r\n    return math.floor(fact) "}
{"instruction": "Write a python function to find the average of even numbers till a given even number.", "output": "def average_Even(n) : \r\n    if (n% 2!= 0) : \r\n        return (\"Invalid Input\") \r\n        return -1  \r\n    sm = 0\r\n    count = 0\r\n    while (n>= 2) : \r\n        count += 1\r\n        sm += n \r\n        n -= 2\r\n    return sm // count "}
{"instruction": "Write a function to count occurrence of a character in a string.", "output": "def count_char(string,char):\r\n count = 0\r\n for i in range(len(string)):\r\n    if(string[i] == char):\r\n        count += 1\r\n return count"}
{"instruction": "Write a python function to check whether the given number can be represented by sum of two squares or not.", "output": "def sum_Square(n) : \r\n    i = 1 \r\n    while i*i <= n : \r\n        j = 1\r\n        while (j*j <= n) : \r\n            if (i*i+j*j == n) : \r\n                return True\r\n            j += 1\r\n        i += 1     \r\n    return False"}
{"instruction": "Write a python function to count occurences of a character in a repeated string.", "output": "def count_Char(str,x): \r\n    count = 0\r\n    for i in range(len(str)):  \r\n        if (str[i] == x) : \r\n            count += 1\r\n    n = 10\r\n    repititions = n // len(str)  \r\n    count *= repititions  \r\n    l = n % len(str)  \r\n    for i in range(l): \r\n        if (str[i] == x):  \r\n            count += 1\r\n    return count  "}
{"instruction": "Write a function to calculate the standard deviation.", "output": "import math\r\nimport sys\r\ndef sd_calc(data):\r\n    n = len(data)\r\n    if n <= 1:\r\n        return 0.0\r\n    mean, sd = avg_calc(data), 0.0\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd / float(n-1))\r\n    return sd\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n    if n <= 1:\r\n        return ls[0]\r\n    for el in ls:\r\n        mean += float(el)\r\n    mean /= float(n)\r\n    return mean"}
{"instruction": "Write a function to find nth polite number.", "output": "import math \r\ndef is_polite(n): \r\n\tn += 1\r\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) "}
{"instruction": "Write a python function to find the sum of non-repeated elements in a given array.", "output": "def find_Sum(arr,n): \r\n    arr.sort() \r\n    sum = arr[0] \r\n    for i in range(0,n-1): \r\n        if (arr[i] != arr[i+1]): \r\n            sum += arr[i+1]   \r\n    return sum"}
{"instruction": "Write a python function to check whether the count of divisors is even or odd.", "output": "import math \r\ndef count_Divisors(n) : \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count += 1\r\n            else : \r\n                count += 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") "}
{"instruction": "Write function to find the sum of all items in the given dictionary.", "output": "def return_sum(dict):\r\n  sum = 0\r\n  for i in dict.values():\r\n    sum += i\r\n  return sum"}
{"instruction": "Write a python function to find the sum of an array.", "output": "def _sum(arr):  \r\n    sum=0\r\n    for i in arr: \r\n        sum += i      \r\n    return(sum)  "}
{"instruction": "Write a python function to check whether the given number is a perfect square or not.", "output": "def is_Perfect_Square(n) :\r\n    i = 1\r\n    while (i * i<= n):\r\n        if ((n % i == 0) and (n / i == i)):\r\n            return True     \r\n        i += 1\r\n    return False"}
{"instruction": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.", "output": "def sort_by_dnf(arr, n):\r\n  low=0\r\n  mid=0\r\n  high=n-1\r\n  while mid <= high:\r\n    if arr[mid] == 0:\r\n      arr[low], arr[mid] = arr[mid], arr[low]\r\n      low += 1\r\n      mid += 1\r\n    elif arr[mid] == 1:\r\n      mid += 1\r\n    else:\r\n      arr[mid], arr[high] = arr[high], arr[mid]\r\n      high -= 1\r\n  return arr"}
{"instruction": "Write a function to count alphabets,digits and special charactes in a given string.", "output": "def count_alpha_dig_spl(string):\r\n  alphabets=digits = special = 0\r\n  for i in range(len(string)):\r\n    if(string[i].isalpha()):\r\n        alphabets += 1\r\n    elif(string[i].isdigit()):\r\n        digits += 1\r\n    else:\r\n        special += 1\r\n  return (alphabets,digits,special)   "}
{"instruction": "Write a python function to find minimum adjacent swaps required to sort binary array.", "output": "def find_Min_Swaps(arr,n) : \r\n    noOfZeroes = [0] * n \r\n    count = 0 \r\n    noOfZeroes[n - 1] = 1 - arr[n - 1] \r\n    for i in range(n-2,-1,-1) : \r\n        noOfZeroes[i] = noOfZeroes[i + 1] \r\n        if (arr[i] == 0) : \r\n            noOfZeroes[i] = noOfZeroes[i] + 1\r\n    for i in range(0,n) : \r\n        if (arr[i] == 1) : \r\n            count += noOfZeroes[i] \r\n    return count "}
{"instruction": "Write a python function to check whether the given two numbers have same number of digits or not.", "output": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A /= 10; \r\n        B /= 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; "}
{"instruction": "Write a function to find three closest elements from three sorted arrays.", "output": "import sys \r\n\r\ndef find_closet(A, B, C, p, q, r): \r\n\tdiff = sys.maxsize \r\n\tres_i = 0\r\n\tres_j = 0\r\n\tres_k = 0\r\n\ti = 0\r\n\tj = 0\r\n\tk = 0\r\n\twhile(i < p and j < q and k < r): \r\n\t\tminimum = min(A[i], min(B[j], C[k])) \r\n\t\tmaximum = max(A[i], max(B[j], C[k])); \r\n\t\tif maximum-minimum < diff: \r\n\t\t\tres_i = i \r\n\t\t\tres_j = j \r\n\t\t\tres_k = k \r\n\t\t\tdiff = maximum - minimum; \r\n\t\tif diff == 0: \r\n\t\t\tbreak\r\n\t\tif A[i] == minimum: \r\n\t\t\ti += 1\r\n\t\telif B[j] == minimum: \r\n\t\t\tj += 1\r\n\t\telse: \r\n\t\t\tk += 1\r\n\treturn A[res_i],B[res_j],C[res_k]"}
{"instruction": "Write a function to find the similar elements from the given two tuple lists.", "output": "def similar_elements(test_tup1, test_tup2):\n    res = tuple(set(test_tup1) & set(test_tup2))\n    return res\n"}
{"instruction": "Write a python function to check whether the two numbers differ at one bit position only or not.", "output": "def is_Power_Of_Two(x):\n    return x and not x & x - 1\n\n\ndef differ_At_One_Bit_Pos(a, b):\n    return is_Power_Of_Two(a ^ b)\n"}
{"instruction": "Write a function to find all words which are at least 4 characters long in a string by using regex.", "output": "import re\n\n\ndef find_char_long(text):\n    return re.findall('\\\\b\\\\w{4,}\\\\b', text)\n"}
{"instruction": "Write a python function to find the minimum number of rotations required to get the same string.", "output": "def find_Rotations(str):\n    tmp = str + str\n    n = len(str)\n    for i in range(1, n + 1):\n        substring = tmp[i:i + n]\n        if str == substring:\n            return i\n    return n\n"}
{"instruction": "Write a python function to remove first and last occurrence of a given character from the string.", "output": "def remove_Occ(s, ch):\n    for i in range(len(s)):\n        if s[i] == ch:\n            s = s[0:i] + s[i + 1:]\n            break\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] == ch:\n            s = s[0:i] + s[i + 1:]\n            break\n    return s\n"}
{"instruction": "Write a function to count the most common words in a dictionary.", "output": "from collections import Counter\n\n\ndef count_common(words):\n    word_counts = Counter(words)\n    top_four = word_counts.most_common(4)\n    return top_four\n"}
{"instruction": "Write a python function to find the volume of a triangular prism.", "output": "def find_Volume(l, b, h):\n    return l * b * h / 2\n"}
{"instruction": "Write a function to split a string at lowercase letters.", "output": "import re\n\n\ndef split_lowerstring(text):\n    return re.findall('[a-z][^a-z]*', text)\n"}
{"instruction": "Write a function to find sequences of lowercase letters joined with an underscore.", "output": "import re\n\n\ndef text_lowercase_underscore(text):\n    patterns = '^[a-z]+_[a-z]+$'\n    return 'Found a match!' if re.search(patterns, text) else 'Not matched!'\n"}
{"instruction": "Write a function to check if the given tuple list has all k elements.", "output": "def check_k_elements(test_list, K):\n    res = True\n    for tup in test_list:\n        for ele in tup:\n            if ele != K:\n                res = False\n    return res\n"}
{"instruction": "Write a python function to find the element occurring odd number of times.", "output": "def get_Odd_Occurrence(arr, arr_size):\n    for i in range(0, arr_size):\n        count = 0\n        for j in range(0, arr_size):\n            if arr[i] == arr[j]:\n                count += 1\n        if count % 2 != 0:\n            return arr[i]\n    return -1\n"}
{"instruction": "Write a python function to count all the substrings starting and ending with same characters.", "output": "def check_Equality(s):\n    return ord(s[0]) == ord(s[len(s) - 1])\n\n\ndef count_Substring_With_Equal_Ends(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n - i + 1):\n            if check_Equality(s[i:i + j]):\n                result += 1\n    return result\n"}
{"instruction": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.", "output": "def func(nums, k):\n    import collections\n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            d[i] += 1\n    temp = []\n    import heapq\n    for key, v in d.items():\n        if len(temp) < k:\n            temp.append((v, key))\n            if len(temp) == k:\n                heapq.heapify(temp)\n        elif v > temp[0][0]:\n            heapq.heappop(temp)\n            heapq.heappush(temp, (v, key))\n    result = []\n    while temp:\n        v, key = heapq.heappop(temp)\n        result.append(key)\n    return result\n"}
{"instruction": "Write a python function to convert a decimal number to binary number.", "output": "def decimal_To_Binary(N):\n    B_Number = 0\n    cnt = 0\n    while N != 0:\n        rem = N % 2\n        c = pow(10, cnt)\n        B_Number += rem * c\n        N //= 2\n        cnt += 1\n    return B_Number\n"}
{"instruction": "Write a python function to find the missing number in a sorted array.", "output": "def find_missing(ar, N):\n    l = 0\n    r = N - 1\n    while l <= r:\n        mid = (l + r) / 2\n        mid = int(mid)\n        if ar[mid] != mid + 1 and ar[mid - 1] == mid:\n            return mid + 1\n        elif ar[mid] != mid + 1:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return -1\n"}
{"instruction": "Write a python function to find the nth digit in the proper fraction of two given numbers.", "output": "def find_Nth_Digit(p, q, N):\n    while N > 0:\n        N -= 1\n        p *= 10\n        res = p // q\n        p %= q\n    return res\n"}
{"instruction": "Write a function to find the division of first even and odd number of a given list.", "output": "def div_even_odd(list1):\n    first_even = next((el for el in list1 if el % 2 == 0), -1)\n    first_odd = next((el for el in list1 if el % 2 != 0), -1)\n    return first_even / first_odd\n"}
{"instruction": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.", "output": "import heapq\nfrom collections import Counter\n\n\ndef rearange_string(S):\n    ctr = Counter(S)\n    heap = [(-value, key) for key, value in ctr.items()]\n    heapq.heapify(heap)\n    if -heap[0][0] * 2 > len(S) + 1:\n        return ''\n    ans = []\n    while len(heap) >= 2:\n        nct1, char1 = heapq.heappop(heap)\n        nct2, char2 = heapq.heappop(heap)\n        ans.extend([char1, char2])\n        if nct1 + 1:\n            heapq.heappush(heap, (nct1 + 1, char1))\n        if nct2 + 1:\n            heapq.heappush(heap, (nct2 + 1, char2))\n    return ''.join(ans) + (heap[0][1] if heap else '')\n"}
{"instruction": "Write a function to find sequences of lowercase letters joined with an underscore using regex.", "output": "import re\n\n\ndef text_match(text):\n    patterns = '^[a-z]+_[a-z]+$'\n    return 'Found a match!' if re.search(patterns, text) else 'Not matched!'\n"}
{"instruction": "Write a function that matches a word at the beginning of a string.", "output": "import re\n\n\ndef text_match_string(text):\n    patterns = '^\\\\w+'\n    return 'Found a match!' if re.search(patterns, text) else 'Not matched!'\n"}
{"instruction": "Write a function to find the gcd of the given array elements.", "output": "def find_gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\n\ndef get_gcd(l):\n    num1 = l[0]\n    num2 = l[1]\n    gcd = find_gcd(num1, num2)\n    for i in range(2, len(l)):\n        gcd = find_gcd(gcd, l[i])\n    return gcd\n"}
{"instruction": "Write a python function to determine whether all the numbers are different from each other are not.", "output": "def test_distinct(data):\n    return True if len(data) == len(set(data)) else False\n"}
{"instruction": "Write a python function to find the last digit when factorial of a divides factorial of b.", "output": "def compute_Last_Digit(A, B):\n    variable = 1\n    if A == B:\n        return 1\n    elif B - A >= 5:\n        return 0\n    else:\n        for i in range(A + 1, B + 1):\n            variable = variable * (i % 10) % 10\n        return variable % 10\n"}
{"instruction": "Write a python function to set all odd bits of a given number.", "output": "def odd_bit_set_number(n):\n    count = 0\n    res = 0\n    temp = n\n    while temp > 0:\n        if count % 2 == 0:\n            res |= 1 << count\n        count += 1\n        temp >>= 1\n    return n | res\n"}
{"instruction": "Write a function to find the list with minimum length using lambda function.", "output": "def min_length_list(input_list):\n    min_length = min(len(x) for x in input_list)\n    min_list = min(input_list, key=lambda i: len(i))\n    return min_length, min_list\n"}
{"instruction": "Write a function to print check if the triangle is equilateral or not.", "output": "def check_equilateral(x, y, z):\n    return True if x == y == z else False\n"}
{"instruction": "Write a python function to check whether the first and last characters of a given string are equal or not.", "output": "def check_Equality(str):\n    return 'Equal' if str[0] == str[-1] else 'Not Equal'\n"}
{"instruction": "Write a function to find t-nth term of geometric series.", "output": "import math\n\n\ndef tn_gp(a, n, r):\n    tn = a * math.pow(r, n - 1)\n    return tn\n"}
{"instruction": "Write a python function to check if a given number is one less than twice its reverse.", "output": "def rev(num):\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num = num // 10\n    return rev_num\n\n\ndef check(n):\n    return 2 * rev(n) == n + 1\n"}
{"instruction": "Write a python function to check whether the given two integers have opposite sign or not.", "output": "def opposite_Signs(x, y):\n    return x ^ y < 0\n"}
{"instruction": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.", "output": "def max_len_sub(arr, n):\n    mls = []\n    max = 0\n    for i in range(n):\n        mls.append(1)\n    for i in range(n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1:\n                mls[i] = mls[j] + 1\n    for i in range(n):\n        if max < mls[i]:\n            max = mls[i]\n    return max\n"}
{"instruction": "Write a function to find the maximum difference between available pairs in the given tuple list.", "output": "def max_difference(test_list):\n    temp = [abs(b - a) for a, b in test_list]\n    res = max(temp)\n    return res\n"}
{"instruction": "Write a function to sort a list of tuples using lambda.", "output": "def subject_marks(subjectmarks):\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n"}
{"instruction": "Write a python function to check whether the given array is monotonic or not.", "output": "def is_Monotonic(A):\n    return all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >=\n        A[i + 1] for i in range(len(A) - 1))\n"}
{"instruction": "Write a function to check whether a list contains the given sublist or not.", "output": "def is_sublist(l, s):\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n    else:\n        for i in range(len(l)):\n            if l[i] == s[0]:\n                n = 1\n                while n < len(s) and l[i + n] == s[n]:\n                    n += 1\n                if n == len(s):\n                    sub_set = True\n    return sub_set\n"}
{"instruction": "Write a function to find whether all the given tuples have equal length or not.", "output": "def find_equal_tuple(Input, k):\n    flag = 1\n    for tuple in Input:\n        if len(tuple) != k:\n            flag = 0\n            break\n    return flag\n\n\ndef get_equal(Input, k):\n    return 'All tuples have same length' if find_equal_tuple(Input, k\n        ) == 1 else 'All tuples do not have same length'\n"}
{"instruction": "Write a python function to check whether the given number can be represented as difference of two squares or not.", "output": "def dif_Square(n):\n    if n % 4 != 2:\n        return True\n    return False\n"}
{"instruction": "Write a function to split the given string with multiple delimiters by using regex.", "output": "import re\n\n\ndef multiple_split(text):\n    return re.split('; |, |\\\\*|\\n', text)\n"}
{"instruction": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.", "output": "def find_tuples(test_list, K):\n    res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n    return str(res)\n"}
{"instruction": "Write a python function to count the number of squares in a rectangle.", "output": "def count_Squares(m, n):\n    if n < m:\n        temp = m\n        m = n\n        n = temp\n    return m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2\n"}
{"instruction": "Write a python function to find the difference between sum of even and odd digits.", "output": "def is_Diff(n):\n    return n % 11 == 0\n"}
{"instruction": "Write a python function to find number of integers with odd number of set bits.", "output": "def count_With_Odd_SetBits(n):\n    if n % 2 != 0:\n        return (n + 1) / 2\n    count = bin(n).count('1')\n    ans = n / 2\n    if count % 2 != 0:\n        ans += 1\n    return ans\n"}
{"instruction": "Write a python function to check whether the length of the word is odd or not.", "output": "def word_len(s):\n    s = s.split(' ')\n    for word in s:\n        return True if len(word) % 2 != 0 else False\n"}
{"instruction": "Write a function to find the nth tetrahedral number.", "output": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) / 6\n"}
{"instruction": "Write a function to zip the two given tuples.", "output": "def zip_tuples(test_tup1, test_tup2):\n    res = []\n    for i, j in enumerate(test_tup1):\n        res.append((j, test_tup2[i % len(test_tup2)]))\n    return res\n"}
{"instruction": "Write a function to find the volume of a sphere.", "output": "import math\n\n\ndef volume_sphere(r):\n    volume = 4 / 3 * math.pi * r * r * r\n    return volume\n"}
{"instruction": "Write a function to find the n-th number in newman conway sequence.", "output": "def sequence(n):\n    return 1 if n == 1 or n == 2 else sequence(sequence(n - 1)) + sequence(\n        n - sequence(n - 1))\n"}
{"instruction": "Write a function to find the closest smaller number than n.", "output": "def closest_num(N):\n    return N - 1\n"}
{"instruction": "Write a function to check whether the given number is undulating or not.", "output": "def is_undulating(n):\n    if len(n) <= 2:\n        return False\n    for i in range(2, len(n)):\n        if n[i - 2] != n[i]:\n            return False\n    return True\n"}
{"instruction": "Write a function to calculate the value of 'a' to the power 'b'.", "output": "def power(a, b):\n    return 1 if b == 0 else 0 if a == 0 else a if b == 1 else a * power(a, \n        b - 1)\n"}
{"instruction": "Write a function to extract the index minimum value record from the given tuples.", "output": "from operator import itemgetter\n\n\ndef index_minimum(test_list):\n    res = min(test_list, key=itemgetter(1))[0]\n    return res\n"}
{"instruction": "Write a function to find eulerian number a(n, m).", "output": "def eulerian_num(n, m):\n    if m >= n or n == 0:\n        return 0\n    if m == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n -\n        1, m)\n"}
{"instruction": "Write a function to add the given list to the given tuples.", "output": "def add_lists(test_list, test_tup):\n    res = tuple(list(test_tup) + test_list)\n    return res\n"}
{"instruction": "Write a python function to count hexadecimal numbers for a given range.", "output": "def count_Hexadecimal(L, R):\n    count = 0\n    for i in range(L, R + 1):\n        if i >= 10 and i <= 15:\n            count += 1\n        elif i > 15:\n            k = i\n            while k != 0:\n                if k % 16 >= 10:\n                    count += 1\n                k = k // 16\n    return count\n"}
{"instruction": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.", "output": "def extract_missing(test_list, strt_val, stop_val):\n    res = []\n    for sub in test_list:\n        if sub[0] > strt_val:\n            res.append((strt_val, sub[0]))\n            strt_val = sub[1]\n        if strt_val < stop_val:\n            res.append((strt_val, stop_val))\n    return res\n"}
{"instruction": "Write a function to check if a string represents an integer or not.", "output": "def check_integer(text):\n    text = text.strip()\n    return None if len(text) < 1 else True if all(text[i] in '0123456789' for\n        i in range(len(text))) else True if text[0] in '+-' and all(text[i] in\n        '0123456789' for i in range(1, len(text))) else False\n"}
{"instruction": "Write a function to assign frequency to each tuple in the given tuple list.", "output": "from collections import Counter\n\n\ndef assign_freq(test_list):\n    res = [(*key, val) for key, val in Counter(test_list).items()]\n    return str(res)\n"}
{"instruction": "Write a function to convert all possible convertible elements in the list to float.", "output": "def list_to_float(test_list):\n    res = []\n    for tup in test_list:\n        temp = []\n        for ele in tup:\n            temp.append(ele) if ele.isalpha() else temp.append(float(ele))\n        res.append((temp[0], temp[1]))\n    return str(res)\n"}
{"instruction": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.", "output": "def find_length(string, n):\n    current_sum = 0\n    max_sum = 0\n    for i in range(n):\n        current_sum += 1 if string[i] == '0' else -1\n        if current_sum < 0:\n            current_sum = 0\n        max_sum = max(current_sum, max_sum)\n    return max_sum if max_sum else 0\n"}
{"instruction": "Write a python function to find the sum of common divisors of two given numbers.", "output": "def sum(a, b):\n    sum = 0\n    for i in range(1, min(a, b)):\n        if a % i == 0 and b % i == 0:\n            sum += i\n    return sum\n"}
{"instruction": "Write a function to multiply two integers without using the * operator in python.", "output": "def multiply_int(x, y):\n    return -multiply_int(x, -y\n        ) if y < 0 else 0 if y == 0 else x if y == 1 else x + multiply_int(x,\n        y - 1)\n"}
{"instruction": "Write a function to calculate electricity bill.", "output": "def cal_electbill(units):\n    if units < 50:\n        amount = units * 2.6\n        surcharge = 25\n    elif units <= 100:\n        amount = 130 + (units - 50) * 3.25\n        surcharge = 35\n    elif units <= 200:\n        amount = 130 + 162.5 + (units - 100) * 5.26\n        surcharge = 45\n    else:\n        amount = 130 + 162.5 + 526 + (units - 200) * 8.45\n        surcharge = 75\n    total = amount + surcharge\n    return total\n"}
{"instruction": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.", "output": "def is_Sum_Of_Powers_Of_Two(n):\n    return False if n % 2 == 1 else True\n"}
{"instruction": "Write a function to extract elements that occur singly in the given tuple list.", "output": "def extract_singly(test_list):\n    res = []\n    temp = set()\n    for inner in test_list:\n        for ele in inner:\n            if not ele in temp:\n                temp.add(ele)\n                res.append(ele)\n    return res\n"}
{"instruction": "Write a function to find number of lists present in the given tuple.", "output": "def find_lists(Input):\n    return 1 if isinstance(Input, list) else len(Input)\n"}
{"instruction": "Write a python function to find the maximum difference between any two elements in a given array.", "output": "def max_Abs_Diff(arr, n):\n    minEle = arr[0]\n    maxEle = arr[0]\n    for i in range(1, n):\n        minEle = min(minEle, arr[i])\n        maxEle = max(maxEle, arr[i])\n    return maxEle - minEle\n"}
{"instruction": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.", "output": "def longest_subseq_with_diff_one(arr, n):\n    dp = [(1) for i in range(n)]\n    for i in range(n):\n        for j in range(i):\n            if arr[i] == arr[j] + 1 or arr[i] == arr[j] - 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    result = 1\n    for i in range(n):\n        if result < dp[i]:\n            result = dp[i]\n    return result\n"}
{"instruction": "Write a python function to find whether the given number is present in the infinite sequence or not.", "output": "def does_Contain_B(a, b, c):\n    if a == b:\n        return True\n    if (b - a) * c > 0 and (b - a) % c == 0:\n        return True\n    return False\n"}
{"instruction": "Write a function to find the vertex of a parabola.", "output": "def parabola_vertex(a, b, c):\n    vertex = -b / (2 * a), (4 * a * c - b * b) / (4 * a)\n    return vertex\n"}
{"instruction": "Write a python function to find k number of operations required to make all elements equal.", "output": "def min_Ops(arr, n, k):\n    max1 = max(arr)\n    res = 0\n    for i in range(0, n):\n        if (max1 - arr[i]) % k != 0:\n            return -1\n        else:\n            res += (max1 - arr[i]) / k\n    return int(res)\n"}
{"instruction": "Write a function to print the season for the given month and day.", "output": "def month_season(month, days):\n    season = 'winter' if month in ('January', 'February', 'March'\n        ) else 'spring' if month in ('April', 'May', 'June'\n        ) else 'summer' if month in ('July', 'August', 'September'\n        ) else 'autumn'\n    if month == 'March' and days > 19:\n        season = 'spring'\n    elif month == 'June' and days > 20:\n        season = 'summer'\n    elif month == 'September' and days > 21:\n        season = 'autumn'\n    elif month == 'October' and days > 21:\n        season = 'autumn'\n    elif month == 'November' and days > 21:\n        season = 'autumn'\n    elif month == 'December' and days > 20:\n        season = 'winter'\n    return season\n"}
{"instruction": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).", "output": "def sum_series(n):\n    return 0 if n < 1 else n + sum_series(n - 2)\n"}
{"instruction": "Write a function to calculate the area of a regular polygon.", "output": "from math import tan, pi\n\n\ndef area_polygon(s, l):\n    area = s * l ** 2 / (4 * tan(pi / s))\n    return area\n"}
{"instruction": "Write a python function to check whether the sum of divisors are same or not.", "output": "import math\n\n\ndef divSum(n):\n    sum = 1\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            sum = sum + i + math.floor(n / i)\n        i += 1\n    return sum\n\n\ndef areEquivalent(num1, num2):\n    return divSum(num1) == divSum(num2)\n"}
{"instruction": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.", "output": "def count_char_position(str1):\n    count_chars = 0\n    for i in range(len(str1)):\n        if i == ord(str1[i]) - ord('A') or i == ord(str1[i]) - ord('a'):\n            count_chars += 1\n    return count_chars\n"}
{"instruction": "Write a python function to count the pairs with xor as an even number.", "output": "def find_even_Pair(A, N):\n    evenPair = 0\n    for i in range(0, N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 == 0:\n                evenPair += 1\n    return evenPair\n"}
{"instruction": "Write a python function to find smallest power of 2 greater than or equal to n.", "output": "def next_Power_Of_2(n):\n    count = 0\n    if n and not n & n - 1:\n        return n\n    while n != 0:\n        n >>= 1\n        count += 1\n    return 1 << count\n"}
{"instruction": "Write a function to calculate the nth pell number.", "output": "def get_pell(n):\n    if n <= 2:\n        return n\n    a = 1\n    b = 2\n    for i in range(3, n + 1):\n        c = 2 * b + a\n        a = b\n        b = c\n    return b\n"}
{"instruction": "Write a function to find the perimeter of a pentagon.", "output": "import math\n\n\ndef perimeter_pentagon(a):\n    perimeter = 5 * a\n    return perimeter\n"}
{"instruction": "Write a function to remove everything except alphanumeric characters from a string.", "output": "import re\n\n\ndef remove_splchar(text):\n    pattern = re.compile('[\\\\W_]+')\n    return pattern.sub('', text)\n"}
{"instruction": "Write a python function to find two distinct numbers such that their lcm lies within the given range.", "output": "def answer(L, R):\n    return (L, 2 * L) if 2 * L <= R else -1\n"}
{"instruction": "Write a function to search some literals strings in a string.", "output": "import re\n\n\ndef string_literals(patterns, text):\n    for pattern in patterns:\n        return 'Matched!' if re.search(pattern, text) else 'Not Matched!'\n"}
{"instruction": "Write a function to find if the given number is a keith number or not.", "output": "def is_num_keith(x):\n    terms = []\n    temp = x\n    n = 0\n    while temp > 0:\n        terms.append(temp % 10)\n        temp = int(temp / 10)\n        n += 1\n    terms.reverse()\n    next_term = 0\n    i = n\n    while next_term < x:\n        next_term = 0\n        for j in range(1, n + 1):\n            next_term += terms[i - j]\n        terms.append(next_term)\n        i += 1\n    return next_term == x\n"}
{"instruction": "Write a function to find the longest common prefix in the given set of strings.", "output": "def common_prefix_util(str1, str2):\n    result = ''\n    n1 = len(str1)\n    n2 = len(str2)\n    i = 0\n    j = 0\n    while i <= n1 - 1 and j <= n2 - 1:\n        if str1[i] != str2[j]:\n            break\n        result += str1[i]\n        i += 1\n        j += 1\n    return result\n\n\ndef common_prefix(arr, n):\n    prefix = arr[0]\n    for i in range(1, n):\n        prefix = common_prefix_util(prefix, arr[i])\n    return prefix\n"}
{"instruction": "Write a function to count all the distinct pairs having a difference of k in any array.", "output": "def count_pairs(arr, n, k):\n    count = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\n                count += 1\n    return count\n"}
{"instruction": "Write a function to find the focus of a parabola.", "output": "def parabola_focus(a, b, c):\n    focus = -b / (2 * a), (4 * a * c - b * b + 1) / (4 * a)\n    return focus\n"}
{"instruction": "Write a function to search some literals strings in a string by using regex.", "output": "import re\n\n\ndef check_literals(text, patterns):\n    for pattern in patterns:\n        return 'Matched!' if re.search(pattern, text) else 'Not Matched!'\n"}
{"instruction": "Write a function to find the longest common subsequence for the given two sequences.", "output": "def longest_common_subsequence(X, Y, m, n):\n    return 0 if m == 0 or n == 0 else 1 + longest_common_subsequence(X, Y, \n        m - 1, n - 1) if X[m - 1] == Y[n - 1] else max(\n        longest_common_subsequence(X, Y, m, n - 1),\n        longest_common_subsequence(X, Y, m - 1, n))\n"}
{"instruction": "Write a python function to check whether the given number can be represented by product of two squares or not.", "output": "def prod_Square(n):\n    for i in range(2, n + 1):\n        if i * i < n + 1:\n            for j in range(2, n + 1):\n                if i * i * j * j == n:\n                    return True\n    return False\n"}
{"instruction": "Write a python function to find the first missing positive number.", "output": "def first_Missing_Positive(arr, n):\n    ptr = 0\n    for i in range(n):\n        if arr[i] == 1:\n            ptr = 1\n            break\n    if ptr == 0:\n        return 1\n    for i in range(n):\n        if arr[i] <= 0 or arr[i] > n:\n            arr[i] = 1\n    for i in range(n):\n        arr[(arr[i] - 1) % n] += n\n    for i in range(n):\n        if arr[i] <= n:\n            return i + 1\n    return n + 1\n"}
{"instruction": "Write a python function to count the number of integral co-ordinates that lie inside a square.", "output": "def count_Intgral_Points(x1, y1, x2, y2):\n    return (y2 - y1 - 1) * (x2 - x1 - 1)\n"}
{"instruction": "Write a function to check whether the given month name contains 30 days or not.", "output": "def check_monthnumber(monthname3):\n    return (True if monthname3 == 'April' or monthname3 == 'June' or \n        monthname3 == 'September' or monthname3 == 'November' else False)\n"}
{"instruction": "Write a function to remove the duplicates from the given tuple.", "output": "def remove_tuple(test_tup):\n    res = tuple(set(test_tup))\n    return res\n"}
{"instruction": "Write a python function to find the first position of an element in a sorted array.", "output": "def first(arr, x, n):\n    low = 0\n    high = n - 1\n    res = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            high = mid - 1\n    return res\n"}
{"instruction": "Write a function to remove all the tuples with length k.", "output": "def remove_tuples(test_list, K):\n    res = [ele for ele in test_list if len(ele) != K]\n    return res\n"}
{"instruction": "Write a function to perform the exponentiation of the given two tuples.", "output": "def find_exponentio(test_tup1, test_tup2):\n    res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res\n"}
{"instruction": "Write a function to find the largest triangle that can be inscribed in an ellipse.", "output": "import math\n\n\ndef largest_triangle(a, b):\n    if a < 0 or b < 0:\n        return -1\n    area = 3 * math.sqrt(3) * pow(a, 2) / (4 * b)\n    return area\n"}
{"instruction": "Write a python function to find highest power of 2 less than or equal to given number.", "output": "def highest_Power_of_2(n):\n    res = 0\n    for i in range(n, 0, -1):\n        if i & i - 1 == 0:\n            res = i\n            break\n    return res\n"}
{"instruction": "Write a python function to find the hamming distance between given two integers.", "output": "def hamming_Distance(n1, n2):\n    x = n1 ^ n2\n    setBits = 0\n    while x > 0:\n        setBits += x & 1\n        x >>= 1\n    return setBits\n"}
{"instruction": "Write a function to find the inversions of tuple elements in the given tuple list.", "output": "def inversion_elements(test_tup):\n    res = tuple(list(map(lambda x: ~x, list(test_tup))))\n    return res\n"}
{"instruction": "Write a function to perform the adjacent element concatenation in the given tuples.", "output": "def concatenate_elements(test_tup):\n    res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n    return res\n"}
{"instruction": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.", "output": "def find_longest_repeating_subseq(str):\n    n = len(str)\n    dp = [[(0) for k in range(n + 1)] for l in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = 1 + dp[i - 1][j - 1] if str[i - 1] == str[j - 1\n                ] and i != j else max(dp[i][j - 1], dp[i - 1][j])\n    return dp[n][n]\n"}
{"instruction": "Write a python function to count numbers whose oth and nth bits are set.", "output": "def count_Num(n):\n    if n == 1:\n        return 1\n    count = pow(2, n - 2)\n    return count\n"}
{"instruction": "Write a python function to find the sum of fourth power of n natural numbers.", "output": "import math\n\n\ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + i * i * i * i\n    return sum\n"}
{"instruction": "Write a function to perform the concatenation of two string tuples.", "output": "def concatenate_strings(test_tup1, test_tup2):\n    res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res\n"}
{"instruction": "Write a function to decode a run-length encoded given list.", "output": "def decode_list(alist):\n\n    def aux(g):\n        return [(g[1], range(g[0]))] if isinstance(g, list) else [(g, [0])]\n    return [x for g in alist for x, R in aux(g) for i in R]\n"}
{"instruction": "Write a python function to find the first repeated character in a given string.", "output": "def first_Repeated_Char(str):\n    h = {}\n    for ch in str:\n        if ch in h:\n            return ch\n        else:\n            h[ch] = 0\n    return '\\x00'\n"}
{"instruction": "Write a python function to find the minimum operations required to make two numbers equal.", "output": "import math\n\n\ndef min_Operations(A, B):\n    if A > B:\n        swap(A, B)\n    B = B // math.gcd(A, B)\n    return B - 1\n"}
{"instruction": "Write a function to extract maximum and minimum k elements in the given tuple.", "output": "def extract_min_max(test_tup, K):\n    res = []\n    test_tup = list(test_tup)\n    temp = sorted(test_tup)\n    for idx, val in enumerate(temp):\n        if idx < K or idx >= len(temp) - K:\n            res.append(val)\n    res = tuple(res)\n    return res\n"}
{"instruction": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.", "output": "import re\n\n\ndef replace_max_specialchar(text, n):\n    return re.sub('[ ,.]', ':', text, n)\n"}
{"instruction": "Write a function to check if all the elements in tuple have same data type or not.", "output": "def check_type(test_tuple):\n    res = True\n    for ele in test_tuple:\n        if not isinstance(ele, type(test_tuple[0])):\n            res = False\n            break\n    return res\n"}
{"instruction": "Write a function to check for majority element in the given sorted array.", "output": "def is_majority(arr, n, x):\n    i = binary_search(arr, 0, n - 1, x)\n    if i == -1:\n        return False\n    return True if i + n // 2 <= n - 1 and arr[i + n // 2] == x else False\n\n\ndef binary_search(arr, low, high, x):\n    if high >= low:\n        mid = (low + high) // 2\n        return mid if (mid == 0 or x > arr[mid - 1]) and arr[mid\n            ] == x else binary_search(arr, mid + 1, high, x) if x > arr[mid\n            ] else binary_search(arr, low, mid - 1, x)\n    return -1\n"}
{"instruction": "Write a python function to count set bits of a given number.", "output": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"}
{"instruction": "Write a python function to find the minimum element in a sorted and rotated array.", "output": "def find_Min(arr, low, high):\n    while low < high:\n        mid = low + (high - low) // 2\n        if arr[mid] == arr[high]:\n            high -= 1\n        elif arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return arr[high]\n"}
{"instruction": "Write a function to find minimum of three numbers.", "output": "def min_of_three(a, b, c):\n    smallest = a if a <= b and a <= c else b if b <= a and b <= c else c\n    return smallest\n"}
{"instruction": "Write a python function to check whether all the bits are unset in the given range or not.", "output": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    num = (1 << r) - 1 ^ (1 << l - 1) - 1\n    new_num = n & num\n    if new_num == 0:\n        return True\n    return False\n"}
{"instruction": "Write a function to find the maximum sum in the given right triangle of numbers.", "output": "def max_sum(tri, n):\n    if n > 1:\n        tri[1][1] = tri[1][1] + tri[0][0]\n        tri[1][0] = tri[1][0] + tri[0][0]\n    for i in range(2, n):\n        tri[i][0] = tri[i][0] + tri[i - 1][0]\n        tri[i][i] = tri[i][i] + tri[i - 1][i - 1]\n        for j in range(1, i):\n            tri[i][j] = tri[i][j] + tri[i - 1][j - 1] if tri[i][j] + tri[i - 1\n                ][j - 1] >= tri[i][j] + tri[i - 1][j] else tri[i][j] + tri[\n                i - 1][j]\n    return max(tri[n - 1])\n"}
{"instruction": "Write a python function to set all even bits of a given number.", "output": "def even_bit_set_number(n):\n    count = 0\n    res = 0\n    temp = n\n    while temp > 0:\n        if count % 2 == 1:\n            res |= 1 << count\n        count += 1\n        temp >>= 1\n    return n | res\n"}
{"instruction": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.", "output": "def No_of_Triangle(N, K):\n    if N < K:\n        return -1\n    else:\n        Tri_up = 0\n        Tri_up = (N - K + 1) * (N - K + 2) // 2\n        Tri_down = 0\n        Tri_down = (N - 2 * K + 1) * (N - 2 * K + 2) // 2\n        return Tri_up + Tri_down\n"}
{"instruction": "Write a function to check the occurrences of records which occur similar times in the given tuples.", "output": "from collections import Counter\n\n\ndef check_occurences(test_list):\n    res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n    return res\n"}
{"instruction": "Write a python function to count number of non-empty substrings of a given string.", "output": "def number_of_substrings(str):\n    str_len = len(str)\n    return int(str_len * (str_len + 1) / 2)\n"}
{"instruction": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.", "output": "def get_total_number_of_sequences(m, n):\n    T = [[(0) for i in range(n + 1)] for i in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            T[i][j\n                ] = 0 if i == 0 or j == 0 else 0 if i < j else i if j == 1 else T[\n                i - 1][j] + T[i // 2][j - 1]\n    return T[m][n]\n"}
{"instruction": "Write a function to sort the given list based on the occurrence of first element of tuples.", "output": "def sort_on_occurence(lst):\n    dct = {}\n    for i, j in lst:\n        dct.setdefault(i, []).append(j)\n    return [(i, *dict.fromkeys(j), len(j)) for i, j in dct.items()]\n"}
{"instruction": "Write a function for computing square roots using the babylonian method.", "output": "def babylonian_squareroot(number):\n    if number == 0:\n        return 0\n    g = number / 2.0\n    g2 = g + 1\n    while g != g2:\n        n = number / g\n        g2 = g\n        g = (g + n) / 2\n    return g\n"}
{"instruction": "Write a function to find the longest palindromic subsequence in the given string.", "output": "def lps(str):\n    n = len(str)\n    L = [[(0) for x in range(n)] for x in range(n)]\n    for i in range(n):\n        L[i][i] = 1\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            L[i][j] = 2 if str[i] == str[j] and cl == 2 else L[i + 1][j - 1\n                ] + 2 if str[i] == str[j] else max(L[i][j - 1], L[i + 1][j])\n    return L[0][n - 1]\n"}
{"instruction": "Write a function to calculate the harmonic sum of n-1.", "output": "def harmonic_sum(n):\n    return 1 if n < 2 else 1 / n + harmonic_sum(n - 1)\n"}
{"instruction": "Write a python function to convert complex numbers to polar coordinates.", "output": "import cmath\n\n\ndef convert(numbers):\n    num = cmath.polar(numbers)\n    return num\n"}
{"instruction": "Write a python function to count the number of prime numbers less than a given non-negative number.", "output": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\n"}
{"instruction": "Write a function to swap two numbers.", "output": "def swap_numbers(a, b):\n    temp = a\n    a = b\n    b = temp\n    return a, b\n"}
{"instruction": "Write a function to find number of odd elements in the given list using lambda function.", "output": "def count_odd(array_nums):\n    count_odd = len(list(filter(lambda x: x % 2 != 0, array_nums)))\n    return count_odd\n"}
{"instruction": "Write a function to maximize the given two tuples.", "output": "def maximize_elements(test_tup1, test_tup2):\n    res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2)) for tup1, tup2 in\n        zip(test_tup1, test_tup2))\n    return res\n"}
{"instruction": "Write a function to perform mathematical division operation across the given tuples.", "output": "def division_elements(test_tup1, test_tup2):\n    res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res\n"}
{"instruction": "Write a function to calculate a dog's age in dog's years.", "output": "def dog_age(h_age):\n    if h_age < 0:\n        exit()\n    else:\n        d_age = h_age * 10.5 if h_age <= 2 else 21 + (h_age - 2) * 4\n    return d_age\n"}
{"instruction": "Write a function to find the n'th star number.", "output": "def find_star_num(n):\n    return 6 * n * (n - 1) + 1\n"}
{"instruction": "Write a python function to find the sum of even numbers at even positions.", "output": "def sum_even_and_even_index(arr, n):\n    i = 0\n    sum = 0\n    for i in range(0, n, 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n"}
{"instruction": "Write a python function to find the sum of fifth power of first n even natural numbers.", "output": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        j = 2 * i\n        sum = sum + j * j * j * j * j\n    return sum\n"}
{"instruction": "Write a function to perfom the rear element extraction from list of tuples records.", "output": "def rear_extract(test_list):\n    res = [lis[-1] for lis in test_list]\n    return res\n"}
{"instruction": "Write a function to substract the contents of one tuple with corresponding index of other tuple.", "output": "def substract_elements(test_tup1, test_tup2):\n    res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n    return res\n"}
{"instruction": "Write a python function to find sum of even index binomial coefficients.", "output": "import math\n\n\ndef even_binomial_Coeff_Sum(n):\n    return 1 << n - 1\n"}
{"instruction": "Write a python function to find the position of the last removed element from the given array.", "output": "import math as mt\n\n\ndef get_Position(a, n, m):\n    for i in range(n):\n        a[i] = a[i] // m + (a[i] % m != 0)\n    result, maxx = -1, -1\n    for i in range(n - 1, -1, -1):\n        if maxx < a[i]:\n            maxx = a[i]\n            result = i\n    return result + 1\n"}
{"instruction": "Write a function to filter a dictionary based on values.", "output": "def dict_filter(dict, n):\n    result = {key: value for key, value in dict.items() if value >= n}\n    return result\n"}
{"instruction": "Write a function to find the element count that occurs before the record in the given tuple.", "output": "def count_first_elements(test_tup):\n    for count, ele in enumerate(test_tup):\n        if isinstance(ele, tuple):\n            break\n    return count\n"}
{"instruction": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.", "output": "def validate(n):\n    for i in range(10):\n        temp = n\n        count = 0\n        while temp:\n            if temp % 10 == i:\n                count += 1\n            if count > i:\n                return False\n            temp //= 10\n    return True\n"}
{"instruction": "Write a function that matches a string that has an a followed by two to three 'b'.", "output": "import re\n\n\ndef text_match_two_three(text):\n    patterns = 'ab{2,3}'\n    return 'Found a match!' if re.search(patterns, text) else 'Not matched!'\n"}
{"instruction": "Write a python function to calculate the number of odd days in a given year.", "output": "def odd_Days(N):\n    hund1 = N // 100\n    hund4 = N // 400\n    leap = N >> 2\n    ordd = N - leap\n    if hund1:\n        ordd += hund1\n        leap -= hund1\n    if hund4:\n        ordd -= hund4\n        leap += hund4\n    days = ordd + leap * 2\n    odd = days % 7\n    return odd\n"}
{"instruction": "Write a function to find the list of lists with maximum length.", "output": "def max_length(list1):\n    max_length = max(len(x) for x in list1)\n    max_list = max(x for x in list1)\n    return max_length, max_list\n"}
{"instruction": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.", "output": "def count_no_of_ways(n, k):\n    dp = [0] * (n + 1)\n    total = k\n    mod = 1000000007\n    dp[1] = k\n    dp[2] = k * k\n    for i in range(3, n + 1):\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2]) % mod\n    return dp[n]\n"}
{"instruction": "Write a python function to find quotient of two numbers.", "output": "def find(n, m):\n    q = n // m\n    return q\n"}
{"instruction": "Write a function to find the third side of a right angled triangle.", "output": "import math\n\n\ndef otherside_rightangle(w, h):\n    s = math.sqrt(w * w + h * h)\n    return s\n"}
{"instruction": "Write a function to find the maximum value in a given heterogeneous list.", "output": "def max_val(listval):\n    max_val = max(i for i in listval if isinstance(i, int))\n    return max_val\n"}
{"instruction": "Write a function to return the sum of all divisors of a number.", "output": "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"}
{"instruction": "Write a python function to count inversions in an array.", "output": "def get_Inv_Count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n"}
{"instruction": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.", "output": "def count_binary_seq(n):\n    nCr = 1\n    res = 1\n    for r in range(1, n + 1):\n        nCr = nCr * (n + 1 - r) / r\n        res += nCr * nCr\n    return res\n"}
{"instruction": "Write a python function to find the most significant bit number which is also a set bit.", "output": "def set_Bit_Number(n):\n    if n == 0:\n        return 0\n    msb = 0\n    n = int(n / 2)\n    while n > 0:\n        n = int(n / 2)\n        msb += 1\n    return 1 << msb\n"}
{"instruction": "Write a python function to check whether the count of inversion of two types are same or not.", "output": "import sys\n\n\ndef solve(a, n):\n    mx = -sys.maxsize - 1\n    for j in range(1, n):\n        if mx > a[j]:\n            return False\n        mx = max(mx, a[j - 1])\n    return True\n"}
{"instruction": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .", "output": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [[(0) for i in range(n)] for i in range(n)]\n    for i in range(n):\n        dp[0][i] = a[i] + a[0] if a[i] > a[0] else a[i]\n    for i in range(1, n):\n        for j in range(n):\n            dp[i][j] = (dp[i - 1][i] + a[j] if dp[i - 1][i] + a[j] > dp[i -\n                1][j] else dp[i - 1][j]) if a[j] > a[i] and j > i else dp[i - 1\n                ][j]\n    return dp[index][k]\n"}
{"instruction": "Write a python function to find the maximum of two numbers.", "output": "def maximum(a, b):\n    return a if a >= b else b\n"}
{"instruction": "Write a python function to set the left most unset bit.", "output": "def set_left_most_unset_bit(n):\n    if not n & n + 1:\n        return n\n    pos, temp, count = 0, n, 0\n    while temp:\n        if not temp & 1:\n            pos = count\n        count += 1\n        temp >>= 1\n    return n | 1 << pos\n"}
{"instruction": "Write a function to find the volume of a cone.", "output": "import math\n\n\ndef volume_cone(r, h):\n    volume = 1.0 / 3 * math.pi * r * r * h\n    return volume\n"}
{"instruction": "Write a python function to find the first maximum length of even word.", "output": "def find_Max_Len_Even(str):\n    n = len(str)\n    i = 0\n    currlen = 0\n    maxlen = 0\n    st = -1\n    while i < n:\n        if str[i] == ' ':\n            if currlen % 2 == 0:\n                if maxlen < currlen:\n                    maxlen = currlen\n                    st = i - currlen\n            currlen = 0\n        else:\n            currlen += 1\n        i += 1\n    if currlen % 2 == 0:\n        if maxlen < currlen:\n            maxlen = currlen\n            st = i - currlen\n    if st == -1:\n        return '-1'\n    return str[st:st + maxlen]\n"}
{"instruction": "Write a function to find the index of the last occurrence of a given number in a sorted array.", "output": "def find_last_occurrence(A, x):\n    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            left = mid + 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\n"}
{"instruction": "Write a function to reflect the modified run-length encoding from a list.", "output": "from itertools import groupby\n\n\ndef modified_encode(alist):\n\n    def ctr_ele(el):\n        return [len(el), el[0]] if len(el) > 1 else el[0]\n    return [ctr_ele(list(group)) for key, group in groupby(alist)]\n"}
{"instruction": "Write a function to find all five characters long word in the given string by using regex.", "output": "import re\n\n\ndef find_long_word(text):\n    return re.findall('\\\\b\\\\w{5}\\\\b', text)\n"}
{"instruction": "Write a function to re-arrange the given array in alternating positive and negative items.", "output": "def right_rotate(arr, n, out_of_place, cur):\n    temp = arr[cur]\n    for i in range(cur, out_of_place, -1):\n        arr[i] = arr[i - 1]\n    arr[out_of_place] = temp\n    return arr\n\n\ndef re_arrange(arr, n):\n    out_of_place = -1\n    for index in range(n):\n        if out_of_place >= 0:\n            if arr[index] >= 0 and arr[out_of_place] < 0 or arr[index\n                ] < 0 and arr[out_of_place] >= 0:\n                arr = right_rotate(arr, n, out_of_place, index)\n                if index - out_of_place > 2:\n                    out_of_place += 2\n                else:\n                    out_of_place = -1\n        if out_of_place == -1:\n            if arr[index] >= 0 and index % 2 == 0 or arr[index\n                ] < 0 and index % 2 == 1:\n                out_of_place = index\n    return arr\n"}
{"instruction": "Write a function to extract the sum of alternate chains of tuples.", "output": "def sum_of_alternates(test_tuple):\n    sum1 = 0\n    sum2 = 0\n    for idx, ele in enumerate(test_tuple):\n        if idx % 2:\n            sum1 += ele\n        else:\n            sum2 += ele\n    return sum1, sum2\n"}
{"instruction": "Write a python function to find the minimum number of squares whose sum is equal to a given number.", "output": "def get_Min_Squares(n):\n    if n <= 3:\n        return n\n    res = n\n    for x in range(1, n + 1):\n        temp = x * x\n        if temp > n:\n            break\n        else:\n            res = min(res, 1 + get_Min_Squares(n - temp))\n    return res\n"}
{"instruction": "Write a function to get the word with most number of occurrences in the given strings list.", "output": "from collections import defaultdict\n\n\ndef most_occurrences(test_list):\n    temp = defaultdict(int)\n    for sub in test_list:\n        for wrd in sub.split():\n            temp[wrd] += 1\n    res = max(temp, key=temp.get)\n    return str(res)\n"}
{"instruction": "Write a function to print check if the triangle is isosceles or not.", "output": "def check_isosceles(x, y, z):\n    return True if x == y or y == z or z == x else False\n"}
{"instruction": "Write a function to find all three, four, five characters long words in the given string by using regex.", "output": "import re\n\n\ndef find_char(text):\n    return re.findall('\\\\b\\\\w{3,5}\\\\b', text)\n"}
{"instruction": "Write a python function to check whether the triangle is valid or not if sides are given.", "output": "def check_Validity(a, b, c):\n    return False if a + b <= c or a + c <= b or b + c <= a else True\n"}
{"instruction": "Write a function to find the sum of arithmetic progression.", "output": "def ap_sum(a, n, d):\n    total = n * (2 * a + (n - 1) * d) / 2\n    return total\n"}
{"instruction": "Write a function to check whether the given month name contains 28 days or not.", "output": "def check_monthnum(monthname1):\n    return True if monthname1 == 'February' else False\n"}
{"instruction": "Write a function that matches a word at the end of a string, with optional punctuation.", "output": "import re\n\n\ndef text_match_word(text):\n    patterns = '\\\\w+\\\\S*$'\n    return 'Found a match!' if re.search(patterns, text) else 'Not matched!'\n"}
{"instruction": "Write a python function to count the number of substrings with same first and last characters.", "output": "def check_Equality(s):\n    return ord(s[0]) == ord(s[len(s) - 1])\n\n\ndef count_Substring_With_Equal_Ends(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n - i + 1):\n            if check_Equality(s[i:i + j]):\n                result += 1\n    return result\n"}
{"instruction": "Write a python function to find the maximum occuring divisor in an interval.", "output": "def find_Divisor(x, y):\n    if x == y:\n        return y\n    return 2\n"}
{"instruction": "Write a function to convert the given set into ordered tuples.", "output": "def set_to_tuple(s):\n    t = tuple(sorted(s))\n    return t\n"}
{"instruction": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.", "output": "from heapq import heappop, heappush\n\n\nclass Node:\n\n    def __init__(self, value, list_num, index):\n        self.value = value\n        self.list_num = list_num\n        self.index = index\n\n    def __lt__(self, other):\n        return self.value < other.value\n\n\ndef find_minimum_range(list):\n    high = float('-inf')\n    p = 0, float('inf')\n    pq = []\n    for i in range(len(list)):\n        heappush(pq, Node(list[i][0], i, 0))\n        high = max(high, list[i][0])\n    while True:\n        top = heappop(pq)\n        low = top.value\n        i = top.list_num\n        j = top.index\n        if high - low < p[1] - p[0]:\n            p = low, high\n        if j == len(list[i]) - 1:\n            return p\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\n        high = max(high, list[i][j + 1])\n"}
{"instruction": "Write a function to find entringer number e(n, k).", "output": "def zigzag(n, k):\n    if n == 0 and k == 0:\n        return 1\n    if k == 0:\n        return 0\n    return zigzag(n, k - 1) + zigzag(n - 1, n - k)\n"}
{"instruction": "Write a python function to count the number of squares in a rectangle.", "output": "def count_Squares(m, n):\n    if n < m:\n        temp = m\n        m = n\n        n = temp\n    return n * (n + 1) * (3 * m - n + 1) // 6\n"}
{"instruction": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.", "output": "def bin_coff(n, r):\n    val = 1\n    if r > n - r:\n        r = n - r\n    for i in range(0, r):\n        val *= n - i\n        val //= i + 1\n    return val\n\n\ndef find_ways(M):\n    n = M // 2\n    a = bin_coff(2 * n, n)\n    b = a // (n + 1)\n    return b\n"}
{"instruction": "Write a python function to check whether the given string is a binary string or not.", "output": "def check(string):\n    p = set(string)\n    s = {'0', '1'}\n    return 'Yes' if s == p or p == {'0'} or p == {'1'} else 'No'\n"}
{"instruction": "Write a python function to find the first element occurring k times in a given array.", "output": "def first_Element(arr, n, k):\n    count_map = {}\n    for i in range(0, n):\n        if arr[i] in count_map.keys():\n            count_map[arr[i]] += 1\n        else:\n            count_map[arr[i]] = 1\n        i += 1\n    for i in range(0, n):\n        if count_map[arr[i]] == k:\n            return arr[i]\n        i += 1\n    return -1\n"}
{"instruction": "Write a python function to check whether all the characters in a given string are unique.", "output": "def unique_Characters(str):\n    for i in range(len(str)):\n        for j in range(i + 1, len(str)):\n            if str[i] == str[j]:\n                return False\n    return True\n"}
{"instruction": "Write a python function to count the number of rectangles in a circle of radius r.", "output": "def count_Rectangles(radius):\n    rectangles = 0\n    diameter = 2 * radius\n    diameterSquare = diameter * diameter\n    for a in range(1, 2 * radius):\n        for b in range(1, 2 * radius):\n            diagnalLengthSquare = a * a + b * b\n            if diagnalLengthSquare <= diameterSquare:\n                rectangles += 1\n    return rectangles\n"}
{"instruction": "Write a function to find the maximum element of all the given tuple records.", "output": "def find_max(test_list):\n    res = max(int(j) for i in test_list for j in i)\n    return res\n"}
{"instruction": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.", "output": "def Check_Solution(a, b, c):\n    return 'Yes' if 2 * b * b == 9 * a * c else 'No'\n"}
{"instruction": "Write a function to find the n\u2019th carol number.", "output": "def get_carol(n):\n    result = 2 ** n - 1\n    return result * result - 2\n"}
{"instruction": "Write a function to add the k elements to each element in the tuple.", "output": "def add_K_element(test_list, K):\n    res = [tuple(j + K for j in sub) for sub in test_list]\n    return res\n"}
{"instruction": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.", "output": "def make_flip(ch):\n    return '1' if ch == '0' else '0'\n\n\ndef get_flip_with_starting_charcter(str, expected):\n    flip_count = 0\n    for i in range(len(str)):\n        if str[i] != expected:\n            flip_count += 1\n        expected = make_flip(expected)\n    return flip_count\n\n\ndef min_flip_to_make_string_alternate(str):\n    return min(get_flip_with_starting_charcter(str, '0'),\n        get_flip_with_starting_charcter(str, '1'))\n"}
{"instruction": "Write a function to check if a binary tree is balanced or not.", "output": "class Node:\n\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\n\ndef get_height(root):\n    if root is None:\n        return 0\n    return max(get_height(root.left), get_height(root.right)) + 1\n\n\ndef is_tree_balanced(root):\n    if root is None:\n        return True\n    lh = get_height(root.left)\n    rh = get_height(root.right)\n    if abs(lh - rh) <= 1 and is_tree_balanced(root.left\n        ) is True and is_tree_balanced(root.right) is True:\n        return True\n    return False\n"}
{"instruction": "Write a function to repeat the given tuple n times.", "output": "def repeat_tuples(test_tup, N):\n    res = (test_tup,) * N\n    return res\n"}
{"instruction": "Write a function to find the smallest missing element in a sorted array.", "output": "def smallest_missing(A, left_element, right_element):\n    if left_element > right_element:\n        return left_element\n    mid = left_element + (right_element - left_element) // 2\n    return smallest_missing(A, mid + 1, right_element) if A[mid\n        ] == mid else smallest_missing(A, left_element, mid - 1)\n"}
{"instruction": "Write a function to round the given number to the nearest multiple of a specific number.", "output": "def round_num(n, m):\n    a = n // m * m\n    b = a + m\n    return b if n - a > b - n else a\n"}
{"instruction": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.", "output": "def remove_replica(test_tup):\n    temp = set()\n    res = tuple(ele if ele not in temp and not temp.add(ele) else 'MSP' for\n        ele in test_tup)\n    return res\n"}
{"instruction": "Write a python function to remove all occurrences of a character in a given string.", "output": "def remove_Char(s, c):\n    counts = s.count(c)\n    s = list(s)\n    while counts:\n        s.remove(c)\n        counts -= 1\n    s = ''.join(s)\n    return s\n"}
{"instruction": "Write a function to find the number of rotations in a circularly sorted array.", "output": "def find_rotation_count(A):\n    left, right = 0, len(A) - 1\n    while left <= right:\n        if A[left] <= A[right]:\n            return left\n        mid = (left + right) // 2\n        next = (mid + 1) % len(A)\n        prev = (mid - 1 + len(A)) % len(A)\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\n            return mid\n        elif A[mid] <= A[right]:\n            right = mid - 1\n        elif A[mid] >= A[left]:\n            left = mid + 1\n    return -1\n"}
{"instruction": "Write a python function to find the frequency of the smallest value in a given array.", "output": "def frequency_Of_Smallest(n, arr):\n    mn = arr[0]\n    freq = 1\n    for i in range(1, n):\n        if arr[i] < mn:\n            mn = arr[i]\n            freq = 1\n        elif arr[i] == mn:\n            freq += 1\n    return freq\n"}
{"instruction": "Write a function to find the n'th perrin number using recursion.", "output": "def get_perrin(n):\n    if n == 0:\n        return 3\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    return get_perrin(n - 2) + get_perrin(n - 3)\n"}
{"instruction": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.", "output": "def swap_count(s):\n    chars = s\n    count_left = 0\n    count_right = 0\n    swap = 0\n    imbalance = 0\n    for i in range(len(chars)):\n        if chars[i] == '[':\n            count_left += 1\n            if imbalance > 0:\n                swap += imbalance\n                imbalance -= 1\n        elif chars[i] == ']':\n            count_right += 1\n            imbalance = count_right - count_left\n    return swap\n"}
{"instruction": "Write a python function to check whether the hexadecimal number is even or odd.", "output": "def even_or_odd(N):\n    l = len(N)\n    return 'Even' if N[l - 1] == '0' or N[l - 1] == '2' or N[l - 1\n        ] == '4' or N[l - 1] == '6' or N[l - 1] == '8' or N[l - 1] == 'A' or N[\n        l - 1] == 'C' or N[l - 1] == 'E' else 'Odd'\n"}
{"instruction": "Write a python function to find the highest power of 2 that is less than or equal to n.", "output": "def highest_Power_of_2(n):\n    res = 0\n    for i in range(n, 0, -1):\n        if i & i - 1 == 0:\n            res = i\n            break\n    return res\n"}
{"instruction": "Write a function to find the n'th lucas number.", "output": "def find_lucas(n):\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    return find_lucas(n - 1) + find_lucas(n - 2)\n"}
{"instruction": "Write a function to convert more than one list to nested dictionary.", "output": "def convert_list_dictionary(l1, l2, l3):\n    result = [{x: {y: z}} for x, y, z in zip(l1, l2, l3)]\n    return result\n"}
{"instruction": "Write a function to find the list with maximum length using lambda function.", "output": "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list)\n    max_list = max(input_list, key=lambda i: len(i))\n    return max_length, max_list\n"}
{"instruction": "Write a function to check if given tuple is distinct or not.", "output": "def check_distinct(test_tup):\n    res = True\n    temp = set()\n    for ele in test_tup:\n        if ele in temp:\n            res = False\n            break\n        temp.add(ele)\n    return res\n"}
{"instruction": "Write a function to check whether the given string starts and ends with the same character or not using regex.", "output": "import re\nregex = '^[a-z]$|^([a-z]).*\\\\1$'\n\n\ndef check_char(string):\n    return 'Valid' if re.search(regex, string) else 'Invalid'\n"}
{"instruction": "Write a function to find the median of three specific numbers.", "output": "def median_numbers(a, b, c):\n    median = (a if a < c else b if b > c else c\n        ) if a > b else a if a > c else b if b < c else c\n    return median\n"}
{"instruction": "Write a function to perform the mathematical bitwise xor operation across the given tuples.", "output": "def bitwise_xor(test_tup1, test_tup2):\n    res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res\n"}
{"instruction": "Write a function to extract the frequency of unique tuples in the given list order irrespective.", "output": "def extract_freq(test_list):\n    res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n    return res\n"}
{"instruction": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.", "output": "def add_nested_tuples(test_tup1, test_tup2):\n    res = tuple(tuple(a + b for a, b in zip(tup1, tup2)) for tup1, tup2 in\n        zip(test_tup1, test_tup2))\n    return res\n"}
{"instruction": "Write a function to check if a url is valid or not using regex.", "output": "import re\n\n\ndef is_valid_URL(str):\n    regex = ('((http|https)://)(www.)?' + '[a-zA-Z0-9@:%._\\\\+~#?&//=]' +\n        '{2,256}\\\\.[a-z]' + '{2,6}\\\\b([-a-zA-Z0-9@:%' + '._\\\\+~#?&//=]*)')\n    p = re.compile(regex)\n    if str == None:\n        return False\n    return True if re.search(p, str) else False\n"}
{"instruction": "Write a python function to find the minimum of two numbers.", "output": "def minimum(a, b):\n    return a if a <= b else b\n"}
{"instruction": "Write a function to check whether an element exists within a tuple.", "output": "def check_tuplex(tuplex, tuple1):\n    return True if tuple1 in tuplex else False\n"}
{"instruction": "Write a python function to find the parity of a given number.", "output": "def find_Parity(x):\n    y = x ^ x >> 1\n    y = y ^ y >> 2\n    y = y ^ y >> 4\n    y = y ^ y >> 8\n    y = y ^ y >> 16\n    if y & 1:\n        return 'Odd Parity'\n    return 'Even Parity'\n"}
{"instruction": "Write a python function to check whether the value exists in a sequence or not.", "output": "def overlapping(list1, list2):\n    c = 0\n    d = 0\n    for i in list1:\n        c += 1\n    for i in list2:\n        d += 1\n    for i in range(0, c):\n        for j in range(0, d):\n            if list1[i] == list2[j]:\n                return 1\n    return 0\n"}
{"instruction": "Write a python function to find a pair with highest product from a given array of integers.", "output": "def max_Product(arr):\n    arr_len = len(arr)\n    if arr_len < 2:\n        return 'No pairs exists'\n    x = arr[0]\n    y = arr[1]\n    for i in range(0, arr_len):\n        for j in range(i + 1, arr_len):\n            if arr[i] * arr[j] > x * y:\n                x = arr[i]\n                y = arr[j]\n    return x, y\n"}
{"instruction": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.", "output": "MAX = 1000000\n\n\ndef breakSum(n):\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = max(dp[int(i / 2)] + dp[int(i / 3)] + dp[int(i / 4)], i)\n    return dp[n]\n"}
{"instruction": "Write a python function to find the sublist having maximum length.", "output": "def Find_Max(lst):\n    maxList = max(x for x in lst)\n    return maxList\n"}
{"instruction": "Write a python function to find the cube sum of first n even natural numbers.", "output": "def cube_Sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += 2 * i * (2 * i) * (2 * i)\n    return sum\n"}
{"instruction": "Write a function to solve gold mine problem.", "output": "def get_maxgold(gold, m, n):\n    goldTable = [[(0) for i in range(n)] for j in range(m)]\n    for col in range(n - 1, -1, -1):\n        for row in range(m):\n            right = 0 if col == n - 1 else goldTable[row][col + 1]\n            right_up = 0 if row == 0 or col == n - 1 else goldTable[row - 1][\n                col + 1]\n            right_down = 0 if row == m - 1 or col == n - 1 else goldTable[\n                row + 1][col + 1]\n            goldTable[row][col] = gold[row][col] + max(right, right_up,\n                right_down)\n    res = goldTable[0][0]\n    for i in range(1, m):\n        res = max(res, goldTable[i][0])\n    return res\n"}
{"instruction": "Write a function to extract only the rear index element of each string in the given tuple.", "output": "def extract_rear(test_tuple):\n    res = list(sub[len(sub) - 1] for sub in test_tuple)\n    return res\n"}
{"instruction": "Write a function to extract the elementwise and tuples from the given two tuples.", "output": "def and_tuples(test_tup1, test_tup2):\n    res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res\n"}
{"instruction": "Write a function to find the directrix of a parabola.", "output": "def parabola_directrix(a, b, c):\n    directrix = int(c - (b * b + 1) * 4 * a)\n    return directrix\n"}
{"instruction": "Write a function to check whether the entered number is greater than the elements of the given array.", "output": "def check_greater(arr, number):\n    arr.sort()\n    return ('Yes, the entered number is greater than those in the array' if\n        number > arr[-1] else\n        'No, entered number is less than those in the array')\n"}
{"instruction": "Write a function that matches a string that has an a followed by one or more b's.", "output": "import re\n\n\ndef text_match_one(text):\n    patterns = 'ab+?'\n    return 'Found a match!' if re.search(patterns, text) else 'Not matched!'\n"}
{"instruction": "Write a python function to find the last digit of a given number.", "output": "def last_Digit(n):\n    return n % 10\n"}
{"instruction": "Write a function to count bidirectional tuple pairs.", "output": "def count_bidirectional(test_list):\n    res = 0\n    for idx in range(0, len(test_list)):\n        for iidx in range(idx + 1, len(test_list)):\n            if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1\n                ] == test_list[iidx][0]:\n                res += 1\n    return str(res)\n"}
{"instruction": "Write a function to find all adverbs and their positions in a given sentence.", "output": "import re\n\n\ndef find_adverb_position(text):\n    for m in re.finditer('\\\\w+ly', text):\n        return m.start(), m.end(), m.group(0)\n"}
{"instruction": "Write a function to trim each tuple by k in the given tuple list.", "output": "def trim_tuple(test_list, K):\n    res = []\n    for ele in test_list:\n        N = len(ele)\n        res.append(tuple(list(ele)[K:N - K]))\n    return str(res)\n"}
{"instruction": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.", "output": "def index_multiplication(test_tup1, test_tup2):\n    res = tuple(tuple(a * b for a, b in zip(tup1, tup2)) for tup1, tup2 in\n        zip(test_tup1, test_tup2))\n    return res\n"}
{"instruction": "Write a python function to check whether the triangle is valid or not if 3 points are given.", "output": "def check_Triangle(x1, y1, x2, y2, x3, y3):\n    a = x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)\n    return 'No' if a == 0 else 'Yes'\n"}
{"instruction": "Write a function to remove all whitespaces from the given string using regex.", "output": "import re\n\n\ndef remove_whitespaces(text1):\n    return re.sub('\\\\s+', '', text1)\n"}
{"instruction": "Write a function that gives loss amount if the given amount has loss else return none.", "output": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        amount = sale_amount - actual_cost\n        return amount\n    else:\n        return None\n"}
{"instruction": "Write a function that matches a word containing 'z'.", "output": "import re\n\n\ndef text_match_wordz(text):\n    patterns = '\\\\w*z.\\\\w*'\n    return 'Found a match!' if re.search(patterns, text) else 'Not matched!'\n"}
{"instruction": "Write a function to check whether the given month number contains 31 days or not.", "output": "def check_monthnumb_number(monthnum2):\n    return (True if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or \n        monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 ==\n        12 else False)\n"}
{"instruction": "Write a python function to find the sublist having minimum length.", "output": "def Find_Min(lst):\n    minList = min(x for x in lst)\n    return minList\n"}
{"instruction": "Write a function to remove uppercase substrings from a given string by using regex.", "output": "import re\n\n\ndef remove_uppercase(str1):\n    remove_upper = lambda text: re.sub('[A-Z]', '', text)\n    result = remove_upper(str1)\n    return result\n"}
{"instruction": "Write a function to drop empty items from a given dictionary.", "output": "def drop_empty(dict1):\n    dict1 = {key: value for key, value in dict1.items() if value is not None}\n    return dict1\n"}
{"instruction": "Write a function to find the peak element in the given array.", "output": "def find_peak_util(arr, low, high, n):\n    mid = low + (high - low) / 2\n    mid = int(mid)\n    return mid if (mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or\n        arr[mid + 1] <= arr[mid]) else find_peak_util(arr, low, mid - 1, n\n        ) if mid > 0 and arr[mid - 1] > arr[mid] else find_peak_util(arr, \n        mid + 1, high, n)\n\n\ndef find_peak(arr, n):\n    return find_peak_util(arr, 0, n - 1, n)\n"}
{"instruction": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.", "output": "def max_product(arr, n):\n    mpis = [0] * n\n    for i in range(n):\n        mpis[i] = arr[i]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and mpis[i] < mpis[j] * arr[i]:\n                mpis[i] = mpis[j] * arr[i]\n    return max(mpis)\n"}
{"instruction": "Write a function to find the pairwise addition of the elements of the given tuples.", "output": "def add_pairwise(test_tup):\n    res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n    return res\n"}
{"instruction": "Write a python function to find remainder of array multiplication divided by n.", "output": "def find_remainder(arr, lens, n):\n    mul = 1\n    for i in range(lens):\n        mul = mul * (arr[i] % n) % n\n    return mul % n\n"}
{"instruction": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.", "output": "def tuple_intersection(test_list1, test_list2):\n    res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(\n        sorted(ele)) for ele in test_list2])\n    return res\n"}
{"instruction": "Write a python function to convert the given string to lower case.", "output": "def is_lower(string):\n    return string.lower()\n"}
{"instruction": "Write a python function to find the maximum occurring character in a given string.", "output": "def get_max_occuring_char(str1):\n    ASCII_SIZE = 256\n    ctr = [0] * ASCII_SIZE\n    max = -1\n    ch = ''\n    for i in str1:\n        ctr[ord(i)] += 1\n    for i in str1:\n        if max < ctr[ord(i)]:\n            max = ctr[ord(i)]\n            ch = i\n    return ch\n"}
{"instruction": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.", "output": "def is_subset_sum(set, n, sum):\n    if sum == 0:\n        return True\n    if n == 0:\n        return False\n    if set[n - 1] > sum:\n        return is_subset_sum(set, n - 1, sum)\n    return is_subset_sum(set, n - 1, sum) or is_subset_sum(set, n - 1, sum -\n        set[n - 1])\n"}
{"instruction": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.", "output": "import re\n\n\ndef match(text):\n    pattern = '[A-Z]+[a-z]+$'\n    return 'Yes' if re.search(pattern, text) else 'No'\n"}
{"instruction": "Write a function to remove the matching tuples from the given two tuples.", "output": "def remove_matching_tuple(test_list1, test_list2):\n    res = [sub for sub in test_list1 if sub not in test_list2]\n    return res\n"}
{"instruction": "Write a function to find the largest palindromic number in the given array.", "output": "def is_palindrome(n):\n    divisor = 1\n    while n / divisor >= 10:\n        divisor *= 10\n    while n != 0:\n        leading = n // divisor\n        trailing = n % 10\n        if leading != trailing:\n            return False\n        n = n % divisor // 10\n        divisor = divisor // 100\n    return True\n\n\ndef largest_palindrome(A, n):\n    A.sort()\n    for i in range(n - 1, -1, -1):\n        if is_palindrome(A[i]):\n            return A[i]\n    return -1\n"}
{"instruction": "Write a function to compute binomial probability for the given number.", "output": "def nCr(n, r):\n    if r > n / 2:\n        r = n - r\n    answer = 1\n    for i in range(1, r + 1):\n        answer *= n - r + i\n        answer /= i\n    return answer\n\n\ndef binomial_probability(n, k, p):\n    return nCr(n, k) * pow(p, k) * pow(1 - p, n - k)\n"}
{"instruction": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.", "output": "def sort_tuple(tup):\n    lst = len(tup)\n    for i in range(0, lst):\n        for j in range(0, lst - i - 1):\n            if tup[j][-1] > tup[j + 1][-1]:\n                temp = tup[j]\n                tup[j] = tup[j + 1]\n                tup[j + 1] = temp\n    return tup\n"}
{"instruction": "Write a function to find the area of a pentagon.", "output": "import math\n\n\ndef area_pentagon(a):\n    area = math.sqrt(5 * (5 + 2 * math.sqrt(5))) * pow(a, 2) / 4.0\n    return area\n"}
{"instruction": "Write a python function to find the frequency of the largest value in a given array.", "output": "def frequency_Of_Largest(n, arr):\n    mn = arr[0]\n    freq = 1\n    for i in range(1, n):\n        if arr[i] > mn:\n            mn = arr[i]\n            freq = 1\n        elif arr[i] == mn:\n            freq += 1\n    return freq\n"}
{"instruction": "Write a function to extract all the pairs which are symmetric in the given tuple list.", "output": "def extract_symmetric(test_list):\n    temp = set(test_list) & {(b, a) for a, b in test_list}\n    res = {(a, b) for a, b in temp if a < b}\n    return res\n"}
{"instruction": "Write a function to find the sum of geometric progression series.", "output": "import math\n\n\ndef sum_gp(a, n, r):\n    total = a * (1 - math.pow(r, n)) / (1 - r)\n    return total\n"}
{"instruction": "Write a function to search an element in the given array by using binary search.", "output": "def binary_search(item_list, item):\n    first = 0\n    last = len(item_list) - 1\n    found = False\n    while first <= last and not found:\n        mid = (first + last) // 2\n        if item_list[mid] == item:\n            found = True\n        elif item < item_list[mid]:\n            last = mid - 1\n        else:\n            first = mid + 1\n    return found\n"}
{"instruction": "Write a function to convert the given binary tuple to integer.", "output": "def binary_to_integer(test_tup):\n    res = int(''.join(str(ele) for ele in test_tup), 2)\n    return str(res)\n"}
{"instruction": "Write a function to remove lowercase substrings from a given string by using regex.", "output": "import re\n\n\ndef remove_lowercase(str1):\n    remove_lower = lambda text: re.sub('[a-z]', '', text)\n    result = remove_lower(str1)\n    return result\n"}
{"instruction": "Write a function to concatenate all elements of the given list into a string.", "output": "def concatenate_elements(list):\n    ans = ' '\n    for i in list:\n        ans = ans + ' ' + i\n    return ans\n"}
{"instruction": "Write a python function to find common divisor between two numbers in a given pair.", "output": "def ngcd(x, y):\n    i = 1\n    while i <= x and i <= y:\n        if x % i == 0 and y % i == 0:\n            gcd = i\n        i += 1\n    return gcd\n\n\ndef num_comm_div(x, y):\n    n = ngcd(x, y)\n    result = 0\n    z = int(n ** 0.5)\n    i = 1\n    while i <= z:\n        if n % i == 0:\n            result += 2\n            if i == n / i:\n                result -= 1\n        i += 1\n    return result\n"}
{"instruction": "Write a python function to find remainder of two numbers.", "output": "def find(n, m):\n    r = n % m\n    return r\n"}
{"instruction": "Write a function to calculate the permutation coefficient of given p(n, k).", "output": "def permutation_coefficient(n, k):\n    P = [[(0) for i in range(k + 1)] for j in range(n + 1)]\n    for i in range(n + 1):\n        for j in range(min(i, k) + 1):\n            P[i][j] = 1 if j == 0 else P[i - 1][j] + j * P[i - 1][j - 1]\n            if j < k:\n                P[i][j + 1] = 0\n    return P[n][k]\n"}
{"instruction": "Write a python function to find minimum sum of factors of a given number.", "output": "def find_Min_Sum(num):\n    sum = 0\n    i = 2\n    while i * i <= num:\n        while num % i == 0:\n            sum += i\n            num /= i\n        i += 1\n    sum += num\n    return sum\n"}
{"instruction": "Write a function to convert tuple into list by adding the given string after every element.", "output": "def add_str(test_tup, K):\n    res = [ele for sub in test_tup for ele in (sub, K)]\n    return res\n"}
{"instruction": "Write a function to find the summation of tuple elements in the given tuple list.", "output": "def sum_elements(test_tup):\n    res = sum(list(test_tup))\n    return res\n"}
{"instruction": "Write a function to check if there is a subset with sum divisible by m.", "output": "def modular_sum(arr, n, m):\n    if n > m:\n        return True\n    DP = [(False) for i in range(m)]\n    for i in range(n):\n        if DP[0]:\n            return True\n        temp = [(False) for i in range(m)]\n        for j in range(m):\n            if DP[j] == True:\n                if DP[(j + arr[i]) % m] == False:\n                    temp[(j + arr[i]) % m] = True\n        for j in range(m):\n            if temp[j]:\n                DP[j] = True\n        DP[arr[i] % m] = True\n    return DP[0]\n"}
{"instruction": "Write a function to sort a list of elements using radix sort.", "output": "def radix_sort(nums):\n    RADIX = 10\n    placement = 1\n    max_digit = max(nums)\n    while placement < max_digit:\n        buckets = [list() for _ in range(RADIX)]\n        for i in nums:\n            tmp = int(i / placement % RADIX)\n            buckets[tmp].append(i)\n        a = 0\n        for b in range(RADIX):\n            buck = buckets[b]\n            for i in buck:\n                nums[a] = i\n                a += 1\n        placement *= RADIX\n    return nums\n"}
{"instruction": "Write a function to calculate volume of a tetrahedron.", "output": "import math\n\n\ndef volume_tetrahedron(num):\n    volume = num ** 3 / (6 * math.sqrt(2))\n    return round(volume, 2)\n"}
{"instruction": "Write a function to find the lcm of the given array elements.", "output": "def find_lcm(num1, num2):\n    if num1 > num2:\n        num = num1\n        den = num2\n    else:\n        num = num2\n        den = num1\n    rem = num % den\n    while rem != 0:\n        num = den\n        den = rem\n        rem = num % den\n    gcd = den\n    lcm = int(int(num1 * num2) / int(gcd))\n    return lcm\n\n\ndef get_lcm(l):\n    num1 = l[0]\n    num2 = l[1]\n    lcm = find_lcm(num1, num2)\n    for i in range(2, len(l)):\n        lcm = find_lcm(lcm, l[i])\n    return lcm\n"}
{"instruction": "Write a function to print check if the triangle is scalene or not.", "output": "def check_isosceles(x, y, z):\n    return True if x != y & y != z & z != x else False\n"}
{"instruction": "Write a function to find the longest bitonic subsequence for the given array.", "output": "def lbs(arr):\n    n = len(arr)\n    lis = [(1) for i in range(n + 1)]\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n    lds = [(1) for i in range(n + 1)]\n    for i in reversed(range(n - 1)):\n        for j in reversed(range(i - 1, n)):\n            if arr[i] > arr[j] and lds[i] < lds[j] + 1:\n                lds[i] = lds[j] + 1\n    maximum = lis[0] + lds[0] - 1\n    for i in range(1, n):\n        maximum = max(lis[i] + lds[i] - 1, maximum)\n    return maximum\n"}
{"instruction": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.", "output": "def check_string(str1):\n    messg = [lambda str1: any(x.isupper() for x in str1) or\n        'String must have 1 upper case character.', lambda str1: any(x.\n        islower() for x in str1) or\n        'String must have 1 lower case character.', lambda str1: any(x.\n        isdigit() for x in str1) or 'String must have 1 number.', lambda\n        str1: len(str1) >= 7 or 'String length should be atleast 8.']\n    result = [x for x in [i(str1) for i in messg] if x != True]\n    if not result:\n        result.append('Valid string.')\n    return result\n"}
{"instruction": "Write a function to find the list of lists with minimum length.", "output": "def min_length(list1):\n    min_length = min(len(x) for x in list1)\n    min_list = min(x for x in list1)\n    return min_length, min_list\n"}
{"instruction": "Write a function to find the nth jacobsthal-lucas number.", "output": "def jacobsthal_lucas(n):\n    dp = [0] * (n + 1)\n    dp[0] = 2\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + 2 * dp[i - 2]\n    return dp[n]\n"}
{"instruction": "Write a function to find minimum number of coins that make a given value.", "output": "import sys\n\n\ndef min_coins(coins, m, V):\n    if V == 0:\n        return 0\n    res = sys.maxsize\n    for i in range(0, m):\n        if coins[i] <= V:\n            sub_res = min_coins(coins, m, V - coins[i])\n            if sub_res != sys.maxsize and sub_res + 1 < res:\n                res = sub_res + 1\n    return res\n"}
{"instruction": "Write a function to check if the two given strings are permutations of each other.", "output": "def check_permutation(str1, str2):\n    n1 = len(str1)\n    n2 = len(str2)\n    if n1 != n2:\n        return False\n    a = sorted(str1)\n    str1 = ' '.join(a)\n    b = sorted(str2)\n    str2 = ' '.join(b)\n    for i in range(0, n1, 1):\n        if str1[i] != str2[i]:\n            return False\n    return True\n"}
{"instruction": "Write a function to remove particular data type elements from the given tuple.", "output": "def remove_datatype(test_tuple, data_type):\n    res = []\n    for ele in test_tuple:\n        if not isinstance(ele, data_type):\n            res.append(ele)\n    return res\n"}
{"instruction": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.", "output": "import re\n\n\ndef search_literal(pattern, text):\n    match = re.search(pattern, text)\n    s = match.start()\n    e = match.end()\n    return s, e\n"}
{"instruction": "Write a python function to find the first repeated word in a given string.", "output": "def first_repeated_word(str1):\n    temp = set()\n    for word in str1.split():\n        if word in temp:\n            return word\n        else:\n            temp.add(word)\n    return 'None'\n"}
{"instruction": "Write a python function to find the difference between highest and least frequencies in a given array.", "output": "def find_Diff(arr, n):\n    arr.sort()\n    count = 0\n    max_count = 0\n    min_count = n\n    for i in range(0, n - 1):\n        if arr[i] == arr[i + 1]:\n            count += 1\n            continue\n        else:\n            max_count = max(max_count, count)\n            min_count = min(min_count, count)\n            count = 0\n    return max_count - min_count\n"}
{"instruction": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.", "output": "import re\n\n\ndef fill_spaces(text):\n    return re.sub('[ ,.]', ':', text)\n"}
{"instruction": "Write a function to flatten the tuple list to a string.", "output": "def flatten_tuple(test_list):\n    res = ' '.join([idx for tup in test_list for idx in tup])\n    return res\n"}
{"instruction": "Write a function to find the last occurrence of a character in a string.", "output": "def last_occurence_char(string, char):\n    flag = -1\n    for i in range(len(string)):\n        if string[i] == char:\n            flag = i\n    return None if flag == -1 else flag + 1\n"}
{"instruction": "Write a python function to find the sum of fifth power of first n odd natural numbers.", "output": "def odd_Num_Sum(n):\n    j = 0\n    sm = 0\n    for i in range(1, n + 1):\n        j = 2 * i - 1\n        sm = sm + j * j * j * j * j\n    return sm\n"}
{"instruction": "Write a python function to find the maximum element in a sorted and rotated array.", "output": "def find_Max(arr, low, high):\n    if high < low:\n        return arr[0]\n    if high == low:\n        return arr[low]\n    mid = low + (high - low) // 2\n    if mid < high and arr[mid + 1] < arr[mid]:\n        return arr[mid]\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return arr[mid - 1]\n    return find_Max(arr, low, mid - 1) if arr[low] > arr[mid] else find_Max(arr\n        , mid + 1, high)\n"}
{"instruction": "Write a python function to check whether a given sequence is linear or not.", "output": "def Seq_Linear(seq_nums):\n    seq_nums = [(seq_nums[x] - seq_nums[x - 1]) for x in range(1, len(\n        seq_nums))]\n    return 'Linear Sequence' if len(set(seq_nums)\n        ) == 1 else 'Non Linear Sequence'\n"}
{"instruction": "Write a function to convert the given tuple to a floating-point number.", "output": "def tuple_to_float(test_tup):\n    res = float('.'.join(str(ele) for ele in test_tup))\n    return res\n"}
{"instruction": "Write a python function to find odd numbers from a mixed list.", "output": "def Split(list):\n    od_li = []\n    for i in list:\n        if i % 2 != 0:\n            od_li.append(i)\n    return od_li\n"}
{"instruction": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.", "output": "def difference(n):\n    S = n * (n + 1) // 2\n    res = S * (S - 1)\n    return res\n"}
{"instruction": "Write a python function to count the pairs with xor as an odd number.", "output": "def find_Odd_Pair(A, N):\n    oddPair = 0\n    for i in range(0, N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 != 0:\n                oddPair += 1\n    return oddPair\n"}
{"instruction": "Write a function to find the union of elements of the given tuples.", "output": "def union_elements(test_tup1, test_tup2):\n    res = tuple(set(test_tup1 + test_tup2))\n    return res\n"}
{"instruction": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.", "output": "def assign_elements(test_list):\n    res = dict()\n    for key, val in test_list:\n        res.setdefault(val, [])\n        res.setdefault(key, []).append(val)\n    return res\n"}
{"instruction": "Write a function to extract values between quotation marks of a string.", "output": "import re\n\n\ndef extract_values(text):\n    return re.findall('\"(.*?)\"', text)\n"}
{"instruction": "Write a python function to count unequal element pairs from the given array.", "output": "def count_Pairs(arr, n):\n    cnt = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] != arr[j]:\n                cnt += 1\n    return cnt\n"}
{"instruction": "Write a function to get the sum of a non-negative integer.", "output": "def sum_digits(n):\n    return 0 if n == 0 else n % 10 + sum_digits(int(n / 10))\n"}
{"instruction": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.", "output": "def max_sum_pair_diff_lessthan_K(arr, N, K):\n    arr.sort()\n    dp = [0] * N\n    dp[0] = 0\n    for i in range(1, N):\n        dp[i] = dp[i - 1]\n        if arr[i] - arr[i - 1] < K:\n            dp[i] = max(dp[i], dp[i - 2] + arr[i] + arr[i - 1]\n                ) if i >= 2 else max(dp[i], arr[i] + arr[i - 1])\n    return dp[N - 1]\n"}
{"instruction": "Write a function to find the surface area of a cylinder.", "output": "def surfacearea_cylinder(r, h):\n    surfacearea = 2 * 3.1415 * r * r + 2 * 3.1415 * r * h\n    return surfacearea\n"}
{"instruction": "Write a python function to find nth number in a sequence which is not a multiple of a given number.", "output": "def count_no(A, N, L, R):\n    count = 0\n    for i in range(L, R + 1):\n        if i % A != 0:\n            count += 1\n        if count == N:\n            break\n    return i\n"}
{"instruction": "Write a python function to find the last digit in factorial of a given number.", "output": "def last_Digit_Factorial(n):\n    return (1 if n == 0 else n if n <= 2 else 6 if n == 3 else 4 if n == 4 else\n        0)\n"}
{"instruction": "Write a function to find the dissimilar elements in the given two tuples.", "output": "def find_dissimilar(test_tup1, test_tup2):\n    res = tuple(set(test_tup1) ^ set(test_tup2))\n    return res\n"}
{"instruction": "Write a function to extract the even elements in the nested mixed tuple.", "output": "def even_ele(test_tuple, even_fnc):\n    res = tuple()\n    for ele in test_tuple:\n        if isinstance(ele, tuple):\n            res += even_ele(ele, even_fnc),\n        elif even_fnc(ele):\n            res += ele,\n    return res\n\n\ndef extract_even(test_tuple):\n    res = even_ele(test_tuple, lambda x: x % 2 == 0)\n    return res\n"}
{"instruction": "Write a function to check if a dictionary is empty or not.", "output": "def my_dict(dict1):\n    return False if bool(dict1) else True\n"}
{"instruction": "Write a function to find all adverbs and their positions in a given sentence by using regex.", "output": "import re\n\n\ndef find_adverbs(text):\n    for m in re.finditer('\\\\w+ly', text):\n        return '%d-%d: %s' % (m.start(), m.end(), m.group(0))\n"}
{"instruction": "Write a python function to split the array and add the first part to the end.", "output": "def split_Arr(a, n, k):\n    b = a[:k]\n    return a[k:] + b[:]\n"}
{"instruction": "Write a function to convert polar coordinates to rectangular coordinates.", "output": "import cmath\n\n\ndef polar_rect(x, y):\n    cn = complex(x, y)\n    cn = cmath.polar(cn)\n    cn1 = cmath.rect(2, cmath.pi)\n    return cn, cn1\n"}
{"instruction": "Write a python function to find sum of product of binomial co-efficients.", "output": "def binomial_Coeff(n, k):\n    C = [0] * (k + 1)\n    C[0] = 1\n    for i in range(1, n + 1):\n        for j in range(min(i, k), 0, -1):\n            C[j] = C[j] + C[j - 1]\n    return C[k]\n\n\ndef sum_Of_product(n):\n    return binomial_Coeff(2 * n, n - 1)\n"}
{"instruction": "Write a function to find the difference of first even and odd number of a given list.", "output": "def diff_even_odd(list1):\n    first_even = next((el for el in list1 if el % 2 == 0), -1)\n    first_odd = next((el for el in list1 if el % 2 != 0), -1)\n    return first_even - first_odd\n"}
{"instruction": "Write a python function to count minimum number of swaps required to convert one binary string to another.", "output": "def min_Swaps(str1, str2):\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2 if count % 2 == 0 else 'Not Possible'\n"}
{"instruction": "Write a function to find the size of the given tuple.", "output": "import sys\n\n\ndef tuple_size(tuple_list):\n    return sys.getsizeof(tuple_list)\n"}
{"instruction": "Write a function to find kth element from the given two sorted arrays.", "output": "def find_kth(arr1, arr2, m, n, k):\n    sorted1 = [0] * (m + n)\n    i = 0\n    j = 0\n    d = 0\n    while i < m and j < n:\n        if arr1[i] < arr2[j]:\n            sorted1[d] = arr1[i]\n            i += 1\n        else:\n            sorted1[d] = arr2[j]\n            j += 1\n        d += 1\n    while i < m:\n        sorted1[d] = arr1[i]\n        d += 1\n        i += 1\n    while j < n:\n        sorted1[d] = arr2[j]\n        d += 1\n        j += 1\n    return sorted1[k - 1]\n"}
{"instruction": "Write a python function to check whether the given number is even or not using bitwise operator.", "output": "def is_Even(n):\n    return True if n ^ 1 == n + 1 else False\n"}
{"instruction": "Write a function to find the longest chain which can be formed from the given set of pairs.", "output": "class Pair(object):\n\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\n\ndef max_chain_length(arr, n):\n    max = 0\n    mcl = [(1) for i in range(n)]\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[i].a > arr[j].b and mcl[i] < mcl[j] + 1:\n                mcl[i] = mcl[j] + 1\n    for i in range(n):\n        if max < mcl[i]:\n            max = mcl[i]\n    return max\n"}
{"instruction": "Write a function to check if the given integer is a prime number.", "output": "def prime_num(num):\n    if num >= 1:\n        for i in range(2, num // 2):\n            return False if num % i == 0 else True\n    else:\n        return False\n"}
{"instruction": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.", "output": "import re\npattern = 'fox'\ntext = 'The quick brown fox jumps over the lazy dog.'\n\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    s = match.start()\n    e = match.end()\n    return match.re.pattern, s, e\n"}
{"instruction": "Write a python function to find minimum possible value for the given periodic function.", "output": "def floor_Min(A, B, N):\n    x = max(B - 1, N)\n    return A * x // B\n"}
{"instruction": "Write a function to find the maximum of nth column from the given tuple list.", "output": "def max_of_nth(test_list, N):\n    res = max([sub[N] for sub in test_list])\n    return res\n"}
{"instruction": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.", "output": "def maximum_value(test_list):\n    res = [(key, max(lst)) for key, lst in test_list]\n    return res\n"}
{"instruction": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.", "output": "def cummulative_sum(test_list):\n    res = sum(map(sum, test_list))\n    return res\n"}
{"instruction": "Write a function to perfom the modulo of tuple elements in the given two tuples.", "output": "def tuple_modulo(test_tup1, test_tup2):\n    res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res\n"}
{"instruction": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.", "output": "def min_Jumps(a, b, d):\n    temp = a\n    a = min(a, b)\n    b = max(temp, b)\n    if d >= b:\n        return (d + b - 1) / b\n    if d == 0:\n        return 0\n    return 1 if d == a else 2\n"}
{"instruction": "Write a function to move all the numbers in it to the given string.", "output": "def move_num(test_str):\n    res = ''\n    dig = ''\n    for ele in test_str:\n        if ele.isdigit():\n            dig += ele\n        else:\n            res += ele\n    res += dig\n    return res\n"}
{"instruction": "Write a python function to convert the given string to upper case.", "output": "def is_upper(string):\n    return string.upper()\n"}
{"instruction": "Write a python function to find the smallest missing number from the given array.", "output": "def find_First_Missing(array, start, end):\n    if start > end:\n        return end + 1\n    if start != array[start]:\n        return start\n    mid = int((start + end) / 2)\n    if array[mid] == mid:\n        return find_First_Missing(array, mid + 1, end)\n    return find_First_Missing(array, start, mid)\n"}
{"instruction": "Write a python function to find even numbers from a mixed list.", "output": "def Split(list):\n    ev_li = []\n    for i in list:\n        if i % 2 == 0:\n            ev_li.append(i)\n    return ev_li\n"}
{"instruction": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.", "output": "import re\ntext = 'Python Exercises'\n\n\ndef replace_spaces(text):\n    text = text.replace(' ', '_')\n    return text\n    text = text.replace('_', ' ')\n    return text\n"}
{"instruction": "Write a python function to find the sum of fourth power of first n even natural numbers.", "output": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        j = 2 * i\n        sum = sum + j * j * j * j\n    return sum\n"}
{"instruction": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.", "output": "def Check_Solution(a, b, c):\n    return 'Yes' if a == c else 'No'\n"}
{"instruction": "Write a function to check whether the given amount has no profit and no loss", "output": "def noprofit_noloss(actual_cost, sale_amount):\n    return True if sale_amount == actual_cost else False\n"}
{"instruction": "Write a function to remove the parenthesis area in a string.", "output": "import re\n\n\ndef remove_parenthesis(items):\n    for item in items:\n        return re.sub(' ?\\\\([^)]+\\\\)', '', item)\n"}
{"instruction": "Write a function to remove similar rows from the given tuple matrix.", "output": "def remove_similar_row(test_list):\n    res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))\n    return res\n"}
{"instruction": "Write a function that matches a word containing 'z', not at the start or end of the word.", "output": "import re\n\n\ndef text_match_wordz_middle(text):\n    patterns = '\\\\Bz\\\\B'\n    return 'Found a match!' if re.search(patterns, text) else 'Not matched!'\n"}
{"instruction": "Write a python function to reverse an array upto a given position.", "output": "def reverse_Array_Upto_K(input, k):\n    return input[k - 1::-1] + input[k:]\n"}
{"instruction": "Write a function to find the product of it\u2019s kth index in the given tuples.", "output": "def get_product(val):\n    res = 1\n    for ele in val:\n        res *= ele\n    return res\n\n\ndef find_k_product(test_list, K):\n    res = get_product([sub[K] for sub in test_list])\n    return res\n"}
{"instruction": "Write a python function to count number of cubes of size k in a cube of size n.", "output": "def No_of_cubes(N, K):\n    No = 0\n    No = N - K + 1\n    No = pow(No, 3)\n    return No\n"}
{"instruction": "Write a function to split a string at uppercase letters.", "output": "import re\n\n\ndef split_upperstring(text):\n    return re.findall('[A-Z][^A-Z]*', text)\n"}
{"instruction": "Write a python function to check whether the given two arrays are equal or not.", "output": "def are_Equal(arr1, arr2, n, m):\n    if n != m:\n        return False\n    arr1.sort()\n    arr2.sort()\n    for i in range(0, n - 1):\n        if arr1[i] != arr2[i]:\n            return False\n    return True\n"}
{"instruction": "Write a function to check if one tuple is a subset of another tuple.", "output": "def check_subset(test_tup1, test_tup2):\n    res = set(test_tup2).issubset(test_tup1)\n    return res\n"}
{"instruction": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.", "output": "def matrix_to_list(test_list):\n    temp = [ele for sub in test_list for ele in sub]\n    res = list(zip(*temp))\n    return str(res)\n"}
{"instruction": "Write a python function to find the sum of fifth power of n natural numbers.", "output": "def fifth_Power_Sum(n):\n    sm = 0\n    for i in range(1, n + 1):\n        sm = sm + i * i * i * i * i\n    return sm\n"}
{"instruction": "Write a python function to choose points from two ranges such that no point lies in both the ranges.", "output": "def find_Points(l1, r1, l2, r2):\n    x = min(l1, l2) if l1 != l2 else -1\n    y = max(r1, r2) if r1 != r2 else -1\n    return x, y\n"}
{"instruction": "Write a function to find the largest possible value of k such that k modulo x is y.", "output": "import sys\n\n\ndef find_max_val(n, x, y):\n    ans = -sys.maxsize\n    for k in range(n + 1):\n        if k % x == y:\n            ans = max(ans, k)\n    return ans if ans >= 0 and ans <= n else -1\n"}
{"instruction": "Write a python function to shift first element to the end of given list.", "output": "def move_last(num_list):\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\n    x = [i for i in num_list if i != num_list[0]]\n    x.extend(a)\n    return x\n"}
{"instruction": "Write a python function to count number of vowels in the string.", "output": "def Check_Vow(string, vowels):\n    final = [each for each in string if each in vowels]\n    return len(final)\n"}
{"instruction": "Write a function to check whether the given ip address is valid or not using regex.", "output": "import re\nregex = \"\"\"^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\\\.( \n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\\\.( \n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\\\.( \n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$\"\"\"\n\n\ndef check_IP(Ip):\n    return 'Valid IP address' if re.search(regex, Ip) else 'Invalid IP address'\n"}
{"instruction": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.", "output": "def decreasing_trend(nums):\n    return True if sorted(nums) == nums else False\n"}
{"instruction": "Write a python function to set the right most unset bit.", "output": "import math\n\n\ndef get_Pos_Of_Right_most_Set_Bit(n):\n    return int(math.log2(n & -n) + 1)\n\n\ndef set_Right_most_Unset_Bit(n):\n    if n == 0:\n        return 1\n    if n & n + 1 == 0:\n        return n\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)\n    return 1 << pos - 1 | n\n"}
{"instruction": "Write a function to find maximum of three numbers.", "output": "def max_of_three(num1, num2, num3):\n    lnum = (num1 if num1 >= num2 and num1 >= num3 else num2 if num2 >= num1 and\n        num2 >= num3 else num3)\n    return lnum\n"}
{"instruction": "Write a python function to convert a list of multiple integers into a single integer.", "output": "def convert(list):\n    s = [str(i) for i in list]\n    res = int(''.join(s))\n    return res\n"}
{"instruction": "Write a function to add two integers. however, if the sum is between the given range it will return 20.", "output": "def sum_nums(x, y, m, n):\n    sum_nums = x + y\n    return 20 if sum_nums in range(m, n) else sum_nums\n"}
{"instruction": "Write a function to remove everything except alphanumeric characters from the given string by using regex.", "output": "import re\n\n\ndef remove_extra_char(text1):\n    pattern = re.compile('[\\\\W_]+')\n    return pattern.sub('', text1)\n"}
{"instruction": "Write a function to check if the triangle is valid or not.", "output": "def validity_triangle(a, b, c):\n    total = a + b + c\n    return True if total == 180 else False\n"}
{"instruction": "Write a python function to check whether a sequence of numbers has an increasing trend or not.", "output": "def increasing_trend(nums):\n    return True if sorted(nums) == nums else False\n"}
{"instruction": "Write a python function to find the smallest prime divisor of a number.", "output": "def smallest_Divisor(n):\n    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n\n"}
{"instruction": "Write a python function to find sum of prime numbers between 1 to n.", "output": "def sum_Of_Primes(n):\n    prime = [True] * (n + 1)\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            i = p * 2\n            while i <= n:\n                prime[i] = False\n                i += p\n        p += 1\n    sum = 0\n    for i in range(2, n + 1):\n        if prime[i]:\n            sum += i\n    return sum\n"}
{"instruction": "Write a function to find the frequency of each element in the given list.", "output": "from collections import defaultdict\n\n\ndef freq_element(test_tup):\n    res = defaultdict(int)\n    for ele in test_tup:\n        res[ele] += 1\n    return str(dict(res))\n"}
{"instruction": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.", "output": "def recur_gcd(a, b):\n    low = min(a, b)\n    high = max(a, b)\n    return high if low == 0 else 1 if low == 1 else recur_gcd(low, high % low)\n"}
{"instruction": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block", "output": "def min_jumps(arr, n):\n    jumps = [(0) for i in range(n)]\n    if n == 0 or arr[0] == 0:\n        return float('inf')\n    jumps[0] = 0\n    for i in range(1, n):\n        jumps[i] = float('inf')\n        for j in range(i):\n            if i <= j + arr[j] and jumps[j] != float('inf'):\n                jumps[i] = min(jumps[i], jumps[j] + 1)\n                break\n    return jumps[n - 1]\n"}
{"instruction": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.", "output": "from itertools import groupby\n\n\ndef group_element(test_list):\n    res = dict()\n    for key, val in groupby(sorted(test_list, key=lambda ele: ele[1]), key=\n        lambda ele: ele[1]):\n        res[key] = [ele[0] for ele in val]\n    return res\n"}
{"instruction": "Write a python function to find the last two digits in factorial of a given number.", "output": "def last_Two_Digits(N):\n    if N >= 10:\n        return\n    fac = 1\n    for i in range(1, N + 1):\n        fac = fac * i % 100\n    return fac\n"}
{"instruction": "Write a function to remove multiple spaces in a string by using regex.", "output": "import re\n\n\ndef remove_multiple_spaces(text1):\n    return re.sub(' +', ' ', text1)\n"}
{"instruction": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.", "output": "def check_greater(test_tup1, test_tup2):\n    res = all(x < y for x, y in zip(test_tup1, test_tup2))\n    return res\n"}
{"instruction": "Write a function to find number of even elements in the given list using lambda function.", "output": "def count_even(array_nums):\n    count_even = len(list(filter(lambda x: x % 2 == 0, array_nums)))\n    return count_even\n"}
{"instruction": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.", "output": "def sort_dict_item(test_dict):\n    res = {key: test_dict[key] for key in sorted(test_dict.keys(), key=lambda\n        ele: ele[1] * ele[0])}\n    return res\n"}
{"instruction": "Write a python function to find the minimum number of swaps required to convert one binary string to another.", "output": "def min_Swaps(str1, str2):\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2 if count % 2 == 0 else 'Not Possible'\n"}
{"instruction": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.", "output": "def find_ind(key, i, n, k, arr):\n    ind = -1\n    start = i + 1\n    end = n - 1\n    while start < end:\n        mid = int(start + (end - start) / 2)\n        if arr[mid] - key <= k:\n            ind = mid\n            start = mid + 1\n        else:\n            end = mid\n    return ind\n\n\ndef removals(arr, n, k):\n    ans = n - 1\n    arr.sort()\n    for i in range(0, n):\n        j = find_ind(arr[i], i, n, k, arr)\n        if j != -1:\n            ans = min(ans, n - (j - i + 1))\n    return ans\n"}
{"instruction": "Write a function to check whether the given key is present in the dictionary or not.", "output": "def is_key_present(d, x):\n    return True if x in d else False\n"}
{"instruction": "Write a function to calculate the harmonic sum of n-1.", "output": "def harmonic_sum(n):\n    return 1 if n < 2 else 1 / n + harmonic_sum(n - 1)\n"}
{"instruction": "Write a python function to count the total set bits from 1 to n.", "output": "def count_Set_Bits(n):\n    n += 1\n    powerOf2 = 2\n    cnt = n // 2\n    while powerOf2 <= n:\n        totalPairs = n // powerOf2\n        cnt += totalPairs // 2 * powerOf2\n        cnt = cnt + n % powerOf2 if totalPairs & 1 else cnt + 0\n        powerOf2 <<= 1\n    return cnt\n"}
{"instruction": "Write a function to count unique keys for each value present in the tuple.", "output": "from collections import defaultdict\n\n\ndef get_unique(test_list):\n    res = defaultdict(list)\n    for sub in test_list:\n        res[sub[1]].append(sub[0])\n    res = dict(res)\n    res_dict = dict()\n    for key in res:\n        res_dict[key] = len(list(set(res[key])))\n    return str(res_dict)\n"}
{"instruction": "Write a function to access the initial and last data of the given tuple record.", "output": "def front_and_rear(test_tup):\n    res = test_tup[0], test_tup[-1]\n    return res\n"}
{"instruction": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.", "output": "def product_Equal(n):\n    if n < 10:\n        return False\n    prodOdd = 1\n    prodEven = 1\n    while n > 0:\n        digit = n % 10\n        prodOdd *= digit\n        n = n // 10\n        if n == 0:\n            break\n        digit = n % 10\n        prodEven *= digit\n        n = n // 10\n    if prodOdd == prodEven:\n        return True\n    return False\n"}
{"instruction": "Write a function to check if the given tuple contains all valid values or not.", "output": "def check_valid(test_tup):\n    res = not any(map(lambda ele: not ele, test_tup))\n    return res\n"}
{"instruction": "Write a python function to count the number of distinct power of prime factor of given number.", "output": "def count_Fac(n):\n    m = n\n    count = 0\n    i = 2\n    while i * i <= m:\n        total = 0\n        while n % i == 0:\n            n /= i\n            total += 1\n        temp = 0\n        j = 1\n        while temp + j <= total:\n            temp += j\n            count += 1\n            j += 1\n        i += 1\n    if n != 1:\n        count += 1\n    return count\n"}
{"instruction": "Write a function to convert the given string of integers into a tuple.", "output": "def str_to_tuple(test_str):\n    res = tuple(map(int, test_str.split(', ')))\n    return res\n"}
{"instruction": "Write a function that matches a string that has an a followed by zero or more b's.", "output": "import re\n\n\ndef text_match(text):\n    patterns = 'ab*?'\n    return 'Found a match!' if re.search(patterns, text) else 'Not matched!'\n"}